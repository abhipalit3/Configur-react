{
  "files": {
    "src\\components\\3d\\cable-trays\\CableTrayEditor.js": {
      "functions": [
        "CableTrayEditor",
        "updatePosition",
        "handleDimensionChange",
        "handleTrayTypeChange",
        "handleTierChange",
        "getTierOptions",
        "handleSave",
        "handleCancel",
        "handleCopy",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "calculateScreenPosition",
            "validateDimensionInput",
            "getTierOptionsFromGeometry",
            "findTierSpace",
            "calculateTierYPosition",
            "createAnimationLoop",
            "createEditorKeyHandler"
          ],
          "source": "../utils/common3dHelpers",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js"
        }
      ],
      "exports": [
        {
          "name": "CableTrayEditor",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js"
        }
      ],
      "lineCount": 442
    },
    "src\\components\\3d\\cable-trays\\CableTrayGeometry.js": {
      "functions": [
        "constructor",
        "setSnapPoints",
        "createMaterials",
        "createCableTrayGeometry",
        "createLadderTray",
        "for",
        "createSolidBottomTray",
        "createWireMeshTray",
        "getMaterial",
        "switch",
        "createCableTrayGroup",
        "if",
        "addTransparentCover",
        "addCableTraySnapPoints",
        "catch",
        "calculateCableTrayLength",
        "updateCableTrayAppearance",
        "in2m",
        "m2in",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "extractSnapPoints"
          ],
          "source": "../core/extractGeometrySnapPoints.js",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayGeometry.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\cable-trays\\CableTrayGeometry.js"
        }
      ],
      "exports": [
        {
          "name": "CableTrayGeometry",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayGeometry.js"
        }
      ],
      "lineCount": 475
    },
    "src\\components\\3d\\cable-trays\\CableTrayInteraction.js": {
      "functions": [
        "onTransformChange",
        "onDragEnd",
        "fallbackSetup",
        "constructor",
        "setupTransformControls",
        "if",
        "setupCentralizedEventHandler",
        "registerWithMepManager",
        "handleClick",
        "handleMouseMove",
        "handleTransformKeys",
        "switch",
        "selectCableTray",
        "catch",
        "deselectCableTray",
        "setHoverCableTray",
        "clearHoverCableTray",
        "updateCableTrayDimensions",
        "while",
        "getSelectedCableTray",
        "getSelectedCableTrayGroup",
        "triggerSelectionEvent",
        "setSnapLineManager",
        "setTransformControlsEnabled",
        "setTransformMode",
        "updateAllCableTrayTierInfo",
        "forEach",
        "map",
        "calculateCableTrayTierFromPosition",
        "for",
        "updateCableTrayTierInfo",
        "applyRealTimeSnapping",
        "updateCableTrayPosition",
        "saveCableTrayPosition",
        "createCableTrayMeasurements",
        "clearCableTrayMeasurements",
        "updateCableTrayMeasurements",
        "deleteSelectedCableTray",
        "duplicateSelectedCableTray",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "getMepSelectionManager"
          ],
          "source": "../core/MepSelectionManager.js",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js"
        },
        {
          "items": [
            "setupTransformControls",
            "setupRaycaster",
            "updateMouseCoordinates",
            "createMepKeyboardHandler",
            "registerWithMepManager"
          ],
          "source": "../utils/common3dHelpers.js",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js"
        },
        {
          "items": [
            "createMepEventHandler"
          ],
          "source": "../utils/mepEventHandler.js",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js"
        }
      ],
      "exports": [
        {
          "name": "CableTrayInteraction",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js"
        }
      ],
      "lineCount": 1080
    },
    "src\\components\\3d\\cable-trays\\CableTrayRenderer.js": {
      "functions": [
        "constructor",
        "getCableTraysGroup",
        "setupInteractions",
        "if",
        "updateCableTrays",
        "catch",
        "createCableTray",
        "calculateCableTrayPosition",
        "calculateRackLength",
        "clearCableTrays",
        "getCableTrayById",
        "getAllCableTrays",
        "updateCableTrayColor",
        "setVisible",
        "getStats",
        "getColumnDepth",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "CableTrayGeometry"
          ],
          "source": "./CableTrayGeometry",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayRenderer.js"
        },
        {
          "items": [
            "getColumnSize"
          ],
          "source": "../core/mepUtils",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayRenderer.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\cable-trays\\CableTrayRenderer.js"
        }
      ],
      "exports": [
        {
          "name": "CableTrayRenderer",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\CableTrayRenderer.js"
        }
      ],
      "lineCount": 336
    },
    "src\\components\\3d\\cable-trays\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "CableTrayGeometry",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\index.js"
        },
        {
          "name": "CableTrayRenderer",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\index.js"
        },
        {
          "name": "CableTrayInteraction",
          "type": "named",
          "file": "src\\components\\3d\\cable-trays\\index.js"
        }
      ],
      "lineCount": 9
    },
    "src\\components\\3d\\conduits\\ConduitEditorUI.js": {
      "functions": [
        "ConduitEditorUI",
        "getTierOptions",
        "updatePosition",
        "onCameraChange",
        "handleSave",
        "handleCancel",
        "handleCopy",
        "handleInputChange",
        "handleKeyDown",
        "if",
        "for",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js"
        }
      ],
      "exports": [
        {
          "name": "ConduitEditorUI",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js"
        },
        {
          "name": "ConduitEditorUI",
          "type": "default",
          "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js"
        }
      ],
      "lineCount": 628
    },
    "src\\components\\3d\\conduits\\ConduitGeometry.js": {
      "functions": [
        "constructor",
        "setSnapPoints",
        "in2m",
        "createConduitGeometry",
        "createMultiConduitGroup",
        "for",
        "if",
        "createConduitGroup",
        "updateConduitMaterial",
        "getMaterialType",
        "updateConduitAppearance",
        "switch",
        "createCustomMaterial"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\conduits\\ConduitGeometry.js"
        }
      ],
      "exports": [
        {
          "name": "ConduitGeometry",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitGeometry.js"
        }
      ],
      "lineCount": 643
    },
    "src\\components\\3d\\conduits\\ConduitInteraction.js": {
      "functions": [
        "onTransformChange",
        "onDragEnd",
        "fallbackSetup",
        "constructor",
        "setupTransformControls",
        "if",
        "setupCentralizedEventHandler",
        "registerWithMepManager",
        "handleMouseMove",
        "handleClick",
        "handleTransformKeys",
        "switch",
        "selectConduit",
        "while",
        "updateGroupAppearance",
        "forEach",
        "deselectConduit",
        "deleteSelectedConduit",
        "catch",
        "copySelectedConduit",
        "pasteConduit",
        "displayConduitInfo",
        "clearInfoDisplay",
        "updateConduitTierInfo",
        "calculateConduitTier",
        "for",
        "updateSnapGuides",
        "applyRealTimeSnapping",
        "saveConduitPosition",
        "updateAllConduitTierInfo",
        "map",
        "createConduitMeasurements",
        "clearConduitMeasurements",
        "updateConduitMeasurements",
        "getSelectedConduit",
        "findConduitGroup",
        "updateConduitDimensions",
        "saveConduitDataToStorage",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "getMepSelectionManager"
          ],
          "source": "../core/MepSelectionManager.js",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitInteraction.js"
        },
        {
          "items": [
            "setupTransformControls",
            "setupRaycaster",
            "updateMouseCoordinates",
            "createMepKeyboardHandler",
            "registerWithMepManager"
          ],
          "source": "../utils/common3dHelpers.js",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitInteraction.js"
        },
        {
          "items": [
            "createMepEventHandler"
          ],
          "source": "../utils/mepEventHandler.js",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitInteraction.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\conduits\\ConduitInteraction.js"
        }
      ],
      "exports": [
        {
          "name": "ConduitInteraction",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitInteraction.js"
        }
      ],
      "lineCount": 1314
    },
    "src\\components\\3d\\conduits\\ConduitRenderer.js": {
      "functions": [
        "constructor",
        "setupInteractions",
        "updateConduits",
        "if",
        "catch",
        "createConduit",
        "calculateConduitPosition",
        "calculateTierPosition",
        "for",
        "calculateRackLength",
        "getRackWidth",
        "getColumnDepth",
        "updateRackParams",
        "clearConduits",
        "while",
        "getConduitsGroup",
        "recalculateTierInfo",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "ConduitGeometry"
          ],
          "source": "./ConduitGeometry.js",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitRenderer.js"
        },
        {
          "items": [
            "ConduitInteraction"
          ],
          "source": "./ConduitInteraction.js",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitRenderer.js"
        },
        {
          "items": [
            "getColumnSize"
          ],
          "source": "../core/mepUtils",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitRenderer.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\conduits\\ConduitRenderer.js"
        }
      ],
      "exports": [
        {
          "name": "ConduitRenderer",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\ConduitRenderer.js"
        }
      ],
      "lineCount": 392
    },
    "src\\components\\3d\\conduits\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "ConduitGeometry",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\index.js"
        },
        {
          "name": "ConduitInteraction",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\index.js"
        },
        {
          "name": "ConduitRenderer",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\index.js"
        },
        {
          "name": "ConduitEditorUI",
          "type": "named",
          "file": "src\\components\\3d\\conduits\\index.js"
        }
      ],
      "lineCount": 10
    },
    "src\\components\\3d\\controls\\MeasurementTool.js": {
      "functions": [
        "animate",
        "constructor",
        "createHoverMarkers",
        "createVertexMarker",
        "createEdgeMarker",
        "createPreviewLine",
        "animateHover",
        "if",
        "setAxisLock",
        "toggleAxisLock",
        "toggleButtonAndAxis",
        "clearAxisLocks",
        "updateAxisLockVisuals",
        "enable",
        "disable",
        "onKeyDown",
        "isIn2DView",
        "filterSnapPointsFor2D",
        "for",
        "findClosestSnapPoint",
        "catch",
        "onMouseDown",
        "onMouseUp",
        "onPointerMove",
        "getWorldPositionFromMouse",
        "updatePreviewLabel",
        "hidePreviewLabel",
        "drawMeasurement",
        "createMeasurementLine",
        "createEndMarkers",
        "createMeasurementLabel",
        "formatDistance",
        "decimalToFraction",
        "calculateOptimalLabelPosition",
        "updateLabels",
        "dispose",
        "clearAll",
        "removeMeasurement",
        "findMeasurementAtClick",
        "forEach",
        "updateMeasurementHighlight",
        "traverse",
        "clearSelection",
        "selectAll",
        "deleteSelectedMeasurements",
        "updateManifestMeasurements",
        "restoreFromManifest",
        "createControlsPanel",
        "createAxisButton",
        "updateControlsPanelState",
        "updateAxisButtonState",
        "modifyExistingControlsPanel",
        "hideControlsPanel"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\controls\\MeasurementTool.js"
        }
      ],
      "exports": [
        {
          "name": "MeasurementTool",
          "type": "named",
          "file": "src\\components\\3d\\controls\\MeasurementTool.js"
        }
      ],
      "lineCount": 1638
    },
    "src\\components\\3d\\controls\\ViewCube.js": {
      "functions": [
        "createLabelMaterial",
        "animate",
        "constructor",
        "setupClickHandler",
        "onViewCubeClick",
        "if",
        "getBoundingBox",
        "centerOrbitOnContent",
        "animateToView",
        "calculateOptimalZoom",
        "resetOrbitAxis",
        "updateOrientation",
        "easeInOutCubic",
        "enableClickHandling",
        "disableClickHandling"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\controls\\ViewCube.js"
        }
      ],
      "exports": [
        {
          "name": "ViewCube",
          "type": "named",
          "file": "src\\components\\3d\\controls\\ViewCube.js"
        }
      ],
      "lineCount": 283
    },
    "src\\components\\3d\\core\\extractGeometrySnapPoints.js": {
      "functions": [
        "extractSnapPoints",
        "dedupe",
        "getKey",
        "toVec3",
        "for"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js"
        }
      ],
      "exports": [
        {
          "name": "extractSnapPoints",
          "type": "named",
          "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js"
        }
      ],
      "lineCount": 94
    },
    "src\\components\\3d\\core\\MepSelectionManager.js": {
      "functions": [
        "initializeMepSelectionManager",
        "getMepSelectionManager",
        "constructor",
        "registerHandler",
        "setupEventListeners",
        "isMeasurementToolActive",
        "handleClick",
        "if",
        "handleMouseMove",
        "findClosestMepObject",
        "selectMep",
        "switch",
        "while",
        "catch",
        "setHoverMep",
        "findMepGroupFromObject",
        "deselectAllExcept",
        "deselectAll",
        "clearHoverAllExcept",
        "forEach",
        "clearHoverAll",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\core\\MepSelectionManager.js"
        }
      ],
      "exports": [
        {
          "name": "MepSelectionManager",
          "type": "named",
          "file": "src\\components\\3d\\core\\MepSelectionManager.js"
        },
        {
          "name": "initializeMepSelectionManager",
          "type": "named",
          "file": "src\\components\\3d\\core\\MepSelectionManager.js"
        },
        {
          "name": "getMepSelectionManager",
          "type": "named",
          "file": "src\\components\\3d\\core\\MepSelectionManager.js"
        }
      ],
      "lineCount": 514
    },
    "src\\components\\3d\\core\\mepUtils.js": {
      "functions": [
        "getColumnSize",
        "convertToFeet",
        "inchesToMeters",
        "feetToMeters",
        "if",
        "catch"
      ],
      "imports": [],
      "exports": [
        {
          "name": "getColumnSize",
          "type": "named",
          "file": "src\\components\\3d\\core\\mepUtils.js"
        },
        {
          "name": "convertToFeet",
          "type": "named",
          "file": "src\\components\\3d\\core\\mepUtils.js"
        },
        {
          "name": "inchesToMeters",
          "type": "named",
          "file": "src\\components\\3d\\core\\mepUtils.js"
        },
        {
          "name": "feetToMeters",
          "type": "named",
          "file": "src\\components\\3d\\core\\mepUtils.js"
        }
      ],
      "lineCount": 70
    },
    "src\\components\\3d\\core\\utils.js": {
      "functions": [
        "addEdges",
        "buildRack",
        "createIBeamGeometry",
        "buildShell",
        "buildFloorOnly",
        "tierHeightFt",
        "bottomBeamCenterY",
        "buildPipesFlexible",
        "convertToFeet",
        "if",
        "for"
      ],
      "imports": [
        {
          "items": [
            "extractSnapPoints"
          ],
          "source": "./extractGeometrySnapPoints.js",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\core\\utils.js"
        }
      ],
      "exports": [
        {
          "name": "ft2m",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "in2m",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "ft2in",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "dispose",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "buildRack",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "buildShell",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "buildFloorOnly",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "tierHeightFt",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "bottomBeamCenterY",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        },
        {
          "name": "buildPipesFlexible",
          "type": "named",
          "file": "src\\components\\3d\\core\\utils.js"
        }
      ],
      "lineCount": 773
    },
    "src\\components\\3d\\ductwork\\DuctEditor.js": {
      "functions": [
        "DuctEditor",
        "updatePosition",
        "handleDimensionChange",
        "handleTierChange",
        "getTierOptions",
        "handleSave",
        "handleCancel",
        "handleCopy",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "calculateScreenPosition",
            "validateDimensionInput",
            "getTierOptionsFromGeometry",
            "findTierSpace",
            "calculateTierYPosition",
            "createAnimationLoop",
            "createEditorKeyHandler"
          ],
          "source": "../utils/common3dHelpers",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctEditor.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\ductwork\\DuctEditor.js"
        }
      ],
      "exports": [
        {
          "name": "DuctEditor",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctEditor.js"
        }
      ],
      "lineCount": 436
    },
    "src\\components\\3d\\ductwork\\DuctGeometry.js": {
      "functions": [
        "constructor",
        "setSnapPoints",
        "ft2m",
        "in2m",
        "createRectangularDuctGeometry",
        "createDuctGroup",
        "if",
        "updateDuctAppearance",
        "switch",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "extractSnapPoints"
          ],
          "source": "../core/extractGeometrySnapPoints.js",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctGeometry.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\ductwork\\DuctGeometry.js"
        }
      ],
      "exports": [
        {
          "name": "DuctGeometry",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctGeometry.js"
        }
      ],
      "lineCount": 262
    },
    "src\\components\\3d\\ductwork\\DuctInteraction.js": {
      "functions": [
        "onTransformChange",
        "onDragEnd",
        "fallbackSetup",
        "constructor",
        "setupTransformControls",
        "if",
        "setupCentralizedEventHandler",
        "registerWithMepManager",
        "handleClick",
        "handleMouseMove",
        "handleTransformKeys",
        "switch",
        "applyRealTimeSnapping",
        "for",
        "selectDuct",
        "deselectDuct",
        "catch",
        "createDuctMeasurements",
        "clearDuctMeasurements",
        "updateDuctMeasurements",
        "findDuctGroup",
        "while",
        "updateMousePosition",
        "setDuctEditorCallbacks",
        "calculateDuctTier",
        "updateAllDuctTierInfo",
        "forEach",
        "map",
        "calculateDuctTierFromPosition",
        "saveDuctPosition",
        "getSelectedDuct",
        "updateDuctDimensions",
        "deleteSelectedDuct",
        "duplicateSelectedDuct",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "getMepSelectionManager"
          ],
          "source": "../core/MepSelectionManager.js",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctInteraction.js"
        },
        {
          "items": [
            "setupTransformControls",
            "setupRaycaster",
            "updateMouseCoordinates",
            "createMepKeyboardHandler",
            "registerWithMepManager"
          ],
          "source": "../utils/common3dHelpers.js",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctInteraction.js"
        },
        {
          "items": [
            "createMepEventHandler"
          ],
          "source": "../utils/mepEventHandler.js",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctInteraction.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\ductwork\\DuctInteraction.js"
        }
      ],
      "exports": [
        {
          "name": "DuctInteraction",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctInteraction.js"
        }
      ],
      "lineCount": 964
    },
    "src\\components\\3d\\ductwork\\DuctworkRenderer.js": {
      "functions": [
        "constructor",
        "catch",
        "setupInteractions",
        "updateRackParams",
        "recalculateTierInfo",
        "refreshDuctwork",
        "if",
        "updateDuctwork",
        "createDuct",
        "map",
        "calculateDuctYPosition",
        "clearDuctwork",
        "while",
        "getColumnDepth",
        "getDuctworkGroup",
        "setVisible",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "SnapLineManager",
            "DuctGeometry",
            "DuctInteraction"
          ],
          "source": "../ductwork",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctworkRenderer.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\ductwork\\DuctworkRenderer.js"
        }
      ],
      "exports": [
        {
          "name": "DuctworkRenderer",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\DuctworkRenderer.js"
        }
      ],
      "lineCount": 312
    },
    "src\\components\\3d\\ductwork\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "SnapLineManager",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\index.js"
        },
        {
          "name": "DuctGeometry",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\index.js"
        },
        {
          "name": "DuctInteraction",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\index.js"
        },
        {
          "name": "DuctEditor",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\index.js"
        },
        {
          "name": "DuctworkRenderer",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\index.js"
        }
      ],
      "lineCount": 11
    },
    "src\\components\\3d\\ductwork\\SnapLineManager.js": {
      "functions": [
        "constructor",
        "convertToFeet",
        "if",
        "ft2m",
        "in2m",
        "getRackLength",
        "catch",
        "getPostSize",
        "getAvailableDuctLength",
        "getSnapLinesFromRackGeometry",
        "getBuildingShellParams",
        "createPersistentSnapLines",
        "for",
        "createPersistentHorizontalLine",
        "createPersistentVerticalLine",
        "clearPersistentSnapLines",
        "while",
        "clearSnapGuides",
        "updateRackParams",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\ductwork\\SnapLineManager.js"
        }
      ],
      "exports": [
        {
          "name": "SnapLineManager",
          "type": "named",
          "file": "src\\components\\3d\\ductwork\\SnapLineManager.js"
        }
      ],
      "lineCount": 491
    },
    "src\\components\\3d\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as ThreeScene ",
          "type": "default",
          "file": "src\\components\\3d\\index.js"
        },
        {
          "name": "MeasurementTool",
          "type": "named",
          "file": "src\\components\\3d\\index.js"
        },
        {
          "name": "ViewCube",
          "type": "named",
          "file": "src\\components\\3d\\index.js"
        }
      ],
      "lineCount": 11
    },
    "src\\components\\3d\\materials\\index.js": {
      "functions": [
        "createMaterials",
        "loadTextures",
        "disposeMaterials",
        "forEach"
      ],
      "imports": [
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\materials\\index.js"
        }
      ],
      "exports": [
        {
          "name": "createMaterials",
          "type": "named",
          "file": "src\\components\\3d\\materials\\index.js"
        },
        {
          "name": "loadTextures",
          "type": "named",
          "file": "src\\components\\3d\\materials\\index.js"
        },
        {
          "name": "disposeMaterials",
          "type": "named",
          "file": "src\\components\\3d\\materials\\index.js"
        }
      ],
      "lineCount": 131
    },
    "src\\components\\3d\\piping\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "PipeGeometry",
          "type": "named",
          "file": "src\\components\\3d\\piping\\index.js"
        },
        {
          "name": "PipeInteraction",
          "type": "named",
          "file": "src\\components\\3d\\piping\\index.js"
        },
        {
          "name": "PipingRenderer",
          "type": "named",
          "file": "src\\components\\3d\\piping\\index.js"
        },
        {
          "name": "PipeEditor",
          "type": "named",
          "file": "src\\components\\3d\\piping\\index.js"
        }
      ],
      "lineCount": 10
    },
    "src\\components\\3d\\piping\\PipeEditor.js": {
      "functions": [
        "PipeEditor",
        "getTierOptions",
        "updatePosition",
        "onCameraChange",
        "handleDimensionChange",
        "handleStringChange",
        "handleSave",
        "handleCancel",
        "handleCopy",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "validateDimensionInput",
            "getTierOptionsFromGeometry",
            "findTierSpace",
            "calculateTierYPosition",
            "createEditorKeyHandler"
          ],
          "source": "../utils/common3dHelpers",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeEditor.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\piping\\PipeEditor.js"
        }
      ],
      "exports": [
        {
          "name": "PipeEditor",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeEditor.js"
        }
      ],
      "lineCount": 468
    },
    "src\\components\\3d\\piping\\PipeGeometry.js": {
      "functions": [
        "constructor",
        "setSnapPoints",
        "in2m",
        "createPipeGeometry",
        "createPipeGroup",
        "if",
        "updatePipeMaterial",
        "getMaterialType",
        "updatePipeAppearance",
        "switch",
        "createCustomMaterial"
      ],
      "imports": [
        {
          "items": [
            "extractSnapPoints"
          ],
          "source": "../core/extractGeometrySnapPoints.js",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeGeometry.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\piping\\PipeGeometry.js"
        }
      ],
      "exports": [
        {
          "name": "PipeGeometry",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeGeometry.js"
        }
      ],
      "lineCount": 468
    },
    "src\\components\\3d\\piping\\PipeInteraction.js": {
      "functions": [
        "onTransformChange",
        "onDragEnd",
        "fallbackSetup",
        "constructor",
        "setupTransformControls",
        "if",
        "setupCentralizedEventHandler",
        "registerWithMepManager",
        "handleTransformKeys",
        "switch",
        "handleClick",
        "handleMouseMove",
        "updateMousePosition",
        "findPipeGroup",
        "while",
        "selectPipe",
        "deselectPipe",
        "updateSnapGuides",
        "applyRealTimeSnapping",
        "for",
        "updatePipeMeasurements",
        "catch",
        "savePipePosition",
        "updatePipeTierInfo",
        "calculatePipeTier",
        "updateAllPipeTierInfo",
        "forEach",
        "map",
        "updatePipeDimensions",
        "createPipeMeasurements",
        "clearPipeMeasurements",
        "getSelectedPipe",
        "deleteSelectedPipe",
        "filter",
        "duplicateSelectedPipe",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "getMepSelectionManager"
          ],
          "source": "../core/MepSelectionManager.js",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeInteraction.js"
        },
        {
          "items": [
            "setupTransformControls",
            "setupRaycaster",
            "updateMouseCoordinates",
            "createMepKeyboardHandler",
            "registerWithMepManager"
          ],
          "source": "../utils/common3dHelpers.js",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeInteraction.js"
        },
        {
          "items": [
            "createMepEventHandler"
          ],
          "source": "../utils/mepEventHandler.js",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeInteraction.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\piping\\PipeInteraction.js"
        }
      ],
      "exports": [
        {
          "name": "PipeInteraction",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipeInteraction.js"
        }
      ],
      "lineCount": 928
    },
    "src\\components\\3d\\piping\\PipingRenderer.js": {
      "functions": [
        "constructor",
        "setupInteractions",
        "updatePiping",
        "catch",
        "createPipe",
        "if",
        "for",
        "calculatePipePosition",
        "calculateTierPosition",
        "calculateRackLength",
        "getRackWidth",
        "getColumnDepth",
        "updateRackParams",
        "clearPiping",
        "while",
        "getPipingGroup",
        "recalculateTierInfo",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "PipeGeometry"
          ],
          "source": "./PipeGeometry.js",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipingRenderer.js"
        },
        {
          "items": [
            "PipeInteraction"
          ],
          "source": "./PipeInteraction.js",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipingRenderer.js"
        },
        {
          "items": [
            "getColumnSize"
          ],
          "source": "../core/mepUtils",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipingRenderer.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\piping\\PipingRenderer.js"
        }
      ],
      "exports": [
        {
          "name": "PipingRenderer",
          "type": "named",
          "file": "src\\components\\3d\\piping\\PipingRenderer.js"
        }
      ],
      "lineCount": 392
    },
    "src\\components\\3d\\scene\\ThreeScene.jsx": {
      "functions": [
        "ThreeScene",
        "createBackgroundGrid",
        "updateOrthoCamera",
        "animate",
        "onControlsChange",
        "onKeyDown",
        "logCamera",
        "onLog",
        "centerOrbitOnContent",
        "saveCameraState",
        "loadCameraState",
        "handleDuctSelection",
        "handlePipeSelection",
        "handleConduitSelection",
        "handleCableTraySelection",
        "handleDuctEditorSave",
        "handleDuctEditorCancel",
        "handlePipeEditorSave",
        "handlePipeEditorCancel",
        "handleConduitEditorSave",
        "handleConduitEditorCancel",
        "handleCableTrayEditorSave",
        "handleCableTrayEditorCancel",
        "onViewCubeClick",
        "onResize",
        "handleTradeRackSelected",
        "handleTradeRackDeselected",
        "handleAxisToggle",
        "handleClearMeasurements",
        "for",
        "if",
        "catch",
        "map",
        "setAxisLock"
      ],
      "imports": [
        {
          "items": [
            "OrbitControls"
          ],
          "source": "three/addons/controls/OrbitControls.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "RoomEnvironment"
          ],
          "source": "three/addons/environments/RoomEnvironment.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "dispose"
          ],
          "source": "../core/utils.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "TransformControls"
          ],
          "source": "three/addons/controls/TransformControls.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "ViewCube"
          ],
          "source": "../controls/ViewCube.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "buildRackScene"
          ],
          "source": "../trade-rack/buildRack.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "MeasurementTool"
          ],
          "source": "../controls/MeasurementTool.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "DuctworkRenderer",
            "DuctEditor"
          ],
          "source": "../ductwork",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "PipingRenderer"
          ],
          "source": "../piping",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "PipeEditor"
          ],
          "source": "../piping",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "ConduitRenderer",
            "ConduitEditorUI"
          ],
          "source": "../conduits",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "CableTrayRenderer"
          ],
          "source": "../cable-trays",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "CableTrayEditor"
          ],
          "source": "../cable-trays/CableTrayEditor",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "createMaterials",
            "loadTextures",
            "disposeMaterials"
          ],
          "source": "../materials",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "initializeMepSelectionManager"
          ],
          "source": "../core/MepSelectionManager.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "TradeRackInteraction"
          ],
          "source": "../trade-rack/TradeRackInteraction.js",
          "type": "named",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        },
        {
          "items": [],
          "source": "../styles/measurement-styles.css",
          "type": "side-effect",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        }
      ],
      "exports": [
        {
          "name": "ThreeScene",
          "type": "default",
          "file": "src\\components\\3d\\scene\\ThreeScene.jsx"
        }
      ],
      "lineCount": 1781
    },
    "src\\components\\3d\\trade-rack\\buildRack.js": {
      "functions": [
        "ensureArrays",
        "syncArrays",
        "buildRackScene",
        "forEach",
        "if"
      ],
      "imports": [
        {
          "items": [
            "dispose",
            "buildRack",
            "buildShell",
            "buildPipesFlexible"
          ],
          "source": "../core/utils.js",
          "type": "named",
          "file": "src\\components\\3d\\trade-rack\\buildRack.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\trade-rack\\buildRack.js"
        }
      ],
      "exports": [
        {
          "name": "buildRackScene",
          "type": "named",
          "file": "src\\components\\3d\\trade-rack\\buildRack.js"
        }
      ],
      "lineCount": 132
    },
    "src\\components\\3d\\trade-rack\\TradeRackInteraction.js": {
      "functions": [
        "constructor",
        "setupEventListeners",
        "setupTransformControls",
        "if",
        "registerWithMepManager",
        "isMeasurementToolActive",
        "handleMouseClick",
        "while",
        "selectRack",
        "deselectRack",
        "applySelectionFeedback",
        "removeSelectionFeedback",
        "setHoverRack",
        "clearHoverRack",
        "applyHoverFeedback",
        "removeHoverFeedback",
        "onTransformChange",
        "applyZAxisConstraints",
        "applyZAxisConstraintsToRack",
        "updateTransformVisuals",
        "saveRackPosition",
        "map",
        "catch",
        "calculateRackCenter",
        "positionGizmoAtCenter",
        "notifyRackSelected",
        "notifyRackDeselected",
        "selectObject",
        "deselectAll",
        "setHover",
        "clearHover",
        "getSelectedRack",
        "getCurrentRackPosition",
        "forceSelectRack",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "TransformControls"
          ],
          "source": "three/examples/jsm/controls/TransformControls.js",
          "type": "named",
          "file": "src\\components\\3d\\trade-rack\\TradeRackInteraction.js"
        },
        {
          "items": [
            "getMepSelectionManager"
          ],
          "source": "../core/MepSelectionManager.js",
          "type": "named",
          "file": "src\\components\\3d\\trade-rack\\TradeRackInteraction.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\trade-rack\\TradeRackInteraction.js"
        }
      ],
      "exports": [
        {
          "name": "TradeRackInteraction",
          "type": "named",
          "file": "src\\components\\3d\\trade-rack\\TradeRackInteraction.js"
        }
      ],
      "lineCount": 582
    },
    "src\\components\\3d\\ui\\chatInterface.js": {
      "functions": [
        "initChatInterface",
        "append",
        "if",
        "catch",
        "for"
      ],
      "imports": [],
      "exports": [
        {
          "name": "initChatInterface",
          "type": "named",
          "file": "src\\components\\3d\\ui\\chatInterface.js"
        }
      ],
      "lineCount": 257
    },
    "src\\components\\3d\\utils\\common3dHelpers.js": {
      "functions": [
        "calculateScreenPosition",
        "validateDimensionInput",
        "getTierOptionsFromGeometry",
        "findTierSpace",
        "calculateTierYPosition",
        "calculateTierPosition",
        "disposeObject3D",
        "createButtonHoverHandlers",
        "convertToFeet",
        "calculateRackLength",
        "createAnimationLoop",
        "return",
        "createEditorKeyHandler",
        "setupTransformControls",
        "registerWithMepManager",
        "setupRaycaster",
        "updateMouseCoordinates",
        "createMepKeyboardHandler",
        "animate",
        "tryRegister",
        "if",
        "catch",
        "for",
        "switch"
      ],
      "imports": [
        {
          "items": [
            "TransformControls"
          ],
          "source": "three/addons/controls/TransformControls.js",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        }
      ],
      "exports": [
        {
          "name": "calculateScreenPosition",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "validateDimensionInput",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "getTierOptionsFromGeometry",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "findTierSpace",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "calculateTierYPosition",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "calculateTierPosition",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "disposeObject3D",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "createButtonHoverHandlers",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "convertToFeet",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "calculateRackLength",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "createAnimationLoop",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "createEditorKeyHandler",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "setupTransformControls",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "registerWithMepManager",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "setupRaycaster",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "updateMouseCoordinates",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        },
        {
          "name": "createMepKeyboardHandler",
          "type": "named",
          "file": "src\\components\\3d\\utils\\common3dHelpers.js"
        }
      ],
      "lineCount": 607
    },
    "src\\components\\3d\\utils\\mepEventHandler.js": {
      "functions": [
        "createMepEventHandler",
        "constructor",
        "if",
        "setupEventListeners",
        "removeEventListeners",
        "isMeasurementToolActive",
        "onMouseClick",
        "onMouseMove",
        "onKeyDown",
        "switch",
        "findIntersectedObject",
        "for",
        "findParentObjectOfType",
        "while",
        "checkObjectType",
        "selectObject",
        "deselectObject",
        "getSelectedObject",
        "getHoveredObject",
        "setCallbacks",
        "setCallback",
        "updateConfig",
        "forceSelect",
        "forceDeselect",
        "isSelected",
        "isHovered",
        "dispose"
      ],
      "imports": [
        {
          "items": [
            "updateMouseCoordinates"
          ],
          "source": "./common3dHelpers.js",
          "type": "named",
          "file": "src\\components\\3d\\utils\\mepEventHandler.js"
        },
        {
          "items": [
            "THREE"
          ],
          "source": "three",
          "type": "namespace",
          "file": "src\\components\\3d\\utils\\mepEventHandler.js"
        }
      ],
      "exports": [
        {
          "name": "MepEventHandler",
          "type": "named",
          "file": "src\\components\\3d\\utils\\mepEventHandler.js"
        },
        {
          "name": "createMepEventHandler",
          "type": "named",
          "file": "src\\components\\3d\\utils\\mepEventHandler.js"
        }
      ],
      "lineCount": 490
    },
    "src\\components\\forms\\app-manual-building.js": {
      "functions": [
        "AppManualBuilding",
        "convertToFeet",
        "validateForm",
        "handleInputChange",
        "handleFeetInchesChange",
        "handleSave",
        "getUnitLabel",
        "if"
      ],
      "imports": [
        {
          "items": [
            "buildingShellDefaults"
          ],
          "source": "../../types/buildingShell",
          "type": "named",
          "file": "src\\components\\forms\\app-manual-building.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\forms\\app-manual-building.js"
        },
        {
          "items": [],
          "source": "./app-manual-building.css",
          "type": "side-effect",
          "file": "src\\components\\forms\\app-manual-building.js"
        }
      ],
      "exports": [
        {
          "name": "AppManualBuilding",
          "type": "default",
          "file": "src\\components\\forms\\app-manual-building.js"
        }
      ],
      "lineCount": 277
    },
    "src\\components\\forms\\app-manual-rack.js": {
      "functions": [
        "AppManualRack"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\forms\\app-manual-rack.js"
        },
        {
          "items": [],
          "source": "./app-manual-rack.css",
          "type": "side-effect",
          "file": "src\\components\\forms\\app-manual-rack.js"
        }
      ],
      "exports": [
        {
          "name": "AppManualRack",
          "type": "default",
          "file": "src\\components\\forms\\app-manual-rack.js"
        }
      ],
      "lineCount": 191
    },
    "src\\components\\forms\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as SignIn ",
          "type": "default",
          "file": "src\\components\\forms\\index.js"
        },
        {
          "name": "default as SignUp ",
          "type": "default",
          "file": "src\\components\\forms\\index.js"
        },
        {
          "name": "default as AppManualBuilding ",
          "type": "default",
          "file": "src\\components\\forms\\index.js"
        },
        {
          "name": "default as AppManualRack ",
          "type": "default",
          "file": "src\\components\\forms\\index.js"
        }
      ],
      "lineCount": 10
    },
    "src\\components\\forms\\sign-in.js": {
      "functions": [
        "SignIn"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\forms\\sign-in.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\forms\\sign-in.js"
        },
        {
          "items": [],
          "source": "./sign-in.css",
          "type": "side-effect",
          "file": "src\\components\\forms\\sign-in.js"
        }
      ],
      "exports": [
        {
          "name": "SignIn",
          "type": "default",
          "file": "src\\components\\forms\\sign-in.js"
        }
      ],
      "lineCount": 149
    },
    "src\\components\\forms\\sign-up.js": {
      "functions": [
        "SignUp"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\forms\\sign-up.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\forms\\sign-up.js"
        },
        {
          "items": [],
          "source": "./sign-up.css",
          "type": "side-effect",
          "file": "src\\components\\forms\\sign-up.js"
        }
      ],
      "exports": [
        {
          "name": "SignUp",
          "type": "default",
          "file": "src\\components\\forms\\sign-up.js"
        }
      ],
      "lineCount": 163
    },
    "src\\components\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [],
      "lineCount": 26
    },
    "src\\components\\layout\\app-bottom-options.js": {
      "functions": [
        "AppBottomOptions",
        "handleViewModeChange",
        "if"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\layout\\app-bottom-options.js"
        },
        {
          "items": [],
          "source": "./app-bottom-options.css",
          "type": "side-effect",
          "file": "src\\components\\layout\\app-bottom-options.js"
        }
      ],
      "exports": [
        {
          "name": "AppBottomOptions",
          "type": "default",
          "file": "src\\components\\layout\\app-bottom-options.js"
        }
      ],
      "lineCount": 154
    },
    "src\\components\\layout\\app-top-main-menu.js": {
      "functions": [
        "AppTopMainMenu",
        "handleEditStart",
        "handleEditSave",
        "handleEditCancel",
        "handleKeyDown",
        "if"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\layout\\app-top-main-menu.js"
        },
        {
          "items": [],
          "source": "./app-top-main-menu.css",
          "type": "side-effect",
          "file": "src\\components\\layout\\app-top-main-menu.js"
        }
      ],
      "exports": [
        {
          "name": "AppTopMainMenu",
          "type": "default",
          "file": "src\\components\\layout\\app-top-main-menu.js"
        }
      ],
      "lineCount": 267
    },
    "src\\components\\layout\\footer.js": {
      "functions": [
        "Footer"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\layout\\footer.js"
        },
        {
          "items": [],
          "source": "./footer.css",
          "type": "side-effect",
          "file": "src\\components\\layout\\footer.js"
        }
      ],
      "exports": [
        {
          "name": "Footer",
          "type": "default",
          "file": "src\\components\\layout\\footer.js"
        }
      ],
      "lineCount": 72
    },
    "src\\components\\layout\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as AppTopMainMenu ",
          "type": "default",
          "file": "src\\components\\layout\\index.js"
        },
        {
          "name": "default as AppBottomOptions ",
          "type": "default",
          "file": "src\\components\\layout\\index.js"
        },
        {
          "name": "default as Footer ",
          "type": "default",
          "file": "src\\components\\layout\\index.js"
        }
      ],
      "lineCount": 9
    },
    "src\\components\\mep\\app-add-mep.js": {
      "functions": [
        "AppAddMEP"
      ],
      "imports": [
        {
          "items": [
            "React"
          ],
          "source": "react",
          "type": "default",
          "file": "src\\components\\mep\\app-add-mep.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-add-mep.js"
        },
        {
          "items": [],
          "source": "./app-add-mep.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-add-mep.js"
        }
      ],
      "exports": [
        {
          "name": "AppAddMEP",
          "type": "default",
          "file": "src\\components\\mep\\app-add-mep.js"
        }
      ],
      "lineCount": 115
    },
    "src\\components\\mep\\app-cable-trays.js": {
      "functions": [
        "AppCableTrays",
        "convertToInches",
        "handleFeetInchesChange",
        "handleAddCableTray",
        "getCableTrayColor",
        "if",
        "switch"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-cable-trays.js"
        },
        {
          "items": [],
          "source": "./app-cable-trays.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-cable-trays.js"
        }
      ],
      "exports": [
        {
          "name": "AppCableTrays",
          "type": "default",
          "file": "src\\components\\mep\\app-cable-trays.js"
        }
      ],
      "lineCount": 241
    },
    "src\\components\\mep\\app-conduits.js": {
      "functions": [
        "AppConduits",
        "convertToInches",
        "handleFeetInchesChange",
        "handleAddConduit",
        "getConduitColor",
        "incrementCount",
        "decrementCount",
        "if",
        "switch"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-conduits.js"
        },
        {
          "items": [],
          "source": "./app-conduits.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-conduits.js"
        }
      ],
      "exports": [
        {
          "name": "AppConduits",
          "type": "default",
          "file": "src\\components\\mep\\app-conduits.js"
        }
      ],
      "lineCount": 288
    },
    "src\\components\\mep\\app-ductwork.js": {
      "functions": [
        "AppDuctwork",
        "convertToInches",
        "handleFeetInchesChange",
        "handleAddDuct",
        "if"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-ductwork.js"
        },
        {
          "items": [],
          "source": "./app-ductwork.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-ductwork.js"
        }
      ],
      "exports": [
        {
          "name": "AppDuctwork",
          "type": "default",
          "file": "src\\components\\mep\\app-ductwork.js"
        }
      ],
      "lineCount": 241
    },
    "src\\components\\mep\\app-piping.js": {
      "functions": [
        "AppPiping",
        "convertToInches",
        "handleFeetInchesChange",
        "handleAddPipe",
        "if"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-piping.js"
        },
        {
          "items": [],
          "source": "./app-piping.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-piping.js"
        }
      ],
      "exports": [
        {
          "name": "AppPiping",
          "type": "default",
          "file": "src\\components\\mep\\app-piping.js"
        }
      ],
      "lineCount": 233
    },
    "src\\components\\mep\\app-rack-properties.js": {
      "functions": [
        "AppRackProperties",
        "convertToFeet",
        "validateForm",
        "handleFeetInchesChange",
        "handleMountTypeChange",
        "handleTierCountChange",
        "handleTierHeightChange",
        "handleSelectChange",
        "handleAddRack",
        "renderTierHeightInputs",
        "setFormData",
        "for"
      ],
      "imports": [
        {
          "items": [
            "tradeRackDefaults",
            "convertToFeet",
            "calculateBayConfiguration"
          ],
          "source": "../../types/tradeRack",
          "type": "named",
          "file": "src\\components\\mep\\app-rack-properties.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-rack-properties.js"
        },
        {
          "items": [],
          "source": "./app-rack-properties.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-rack-properties.js"
        }
      ],
      "exports": [
        {
          "name": "AppRackProperties",
          "type": "default",
          "file": "src\\components\\mep\\app-rack-properties.js"
        }
      ],
      "lineCount": 516
    },
    "src\\components\\mep\\app-saved-configurations.js": {
      "functions": [
        "AppSavedConfigurations",
        "handleConfigClick",
        "handleSaveConfiguration",
        "handleUpdateConfig",
        "handleStartRename",
        "handleCancelRename",
        "handleSaveRename",
        "handleDeleteConfig",
        "formatDimension",
        "formatDate",
        "getConfigColor",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "useState",
            "useEffect"
          ],
          "source": "react",
          "type": "named",
          "file": "src\\components\\mep\\app-saved-configurations.js"
        },
        {
          "items": [
            "syncManifestWithLocalStorage",
            "getProjectManifest",
            "setActiveConfiguration"
          ],
          "source": "../../utils/projectManifest",
          "type": "named",
          "file": "src\\components\\mep\\app-saved-configurations.js"
        },
        {
          "items": [
            "calculateTotalHeight"
          ],
          "source": "../../types/tradeRack",
          "type": "named",
          "file": "src\\components\\mep\\app-saved-configurations.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-saved-configurations.js"
        },
        {
          "items": [],
          "source": "./app-saved-configurations.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-saved-configurations.js"
        }
      ],
      "exports": [
        {
          "name": "AppSavedConfigurations",
          "type": "default",
          "file": "src\\components\\mep\\app-saved-configurations.js"
        }
      ],
      "lineCount": 650
    },
    "src\\components\\mep\\app-tier-mep.js": {
      "functions": [
        "getItemDisplayText",
        "AppTierMEP",
        "handleClickOutside",
        "positionColorPicker",
        "getAvailableTiers",
        "groupItemsByTier",
        "toggleSection",
        "handleDeleteAll",
        "if",
        "for",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\mep\\app-tier-mep.js"
        },
        {
          "items": [],
          "source": "./app-tier-mep.css",
          "type": "side-effect",
          "file": "src\\components\\mep\\app-tier-mep.js"
        }
      ],
      "exports": [
        {
          "name": "AppTierMEP",
          "type": "default",
          "file": "src\\components\\mep\\app-tier-mep.js"
        }
      ],
      "lineCount": 587
    },
    "src\\components\\mep\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as AppDuctwork ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        },
        {
          "name": "default as AppPiping ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        },
        {
          "name": "default as AppConduits ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        },
        {
          "name": "default as AppCableTrays ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        },
        {
          "name": "default as AppTierMEP ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        },
        {
          "name": "default as AppAddMEP ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        },
        {
          "name": "default as AppRackProperties ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        },
        {
          "name": "default as AppSavedConfigurations ",
          "type": "default",
          "file": "src\\components\\mep\\index.js"
        }
      ],
      "lineCount": 14
    },
    "src\\components\\navigation\\app-button-left-menu.js": {
      "functions": [
        "AppButtonLeftMenu"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\navigation\\app-button-left-menu.js"
        },
        {
          "items": [],
          "source": "./app-button-left-menu.css",
          "type": "side-effect",
          "file": "src\\components\\navigation\\app-button-left-menu.js"
        }
      ],
      "exports": [
        {
          "name": "AppButtonLeftMenu",
          "type": "default",
          "file": "src\\components\\navigation\\app-button-left-menu.js"
        }
      ],
      "lineCount": 203
    },
    "src\\components\\navigation\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as AppButtonLeftMenu ",
          "type": "default",
          "file": "src\\components\\navigation\\index.js"
        },
        {
          "name": "default as Navbar ",
          "type": "default",
          "file": "src\\components\\navigation\\index.js"
        },
        {
          "name": "default as ProjectsNavbar ",
          "type": "default",
          "file": "src\\components\\navigation\\index.js"
        },
        {
          "name": "default as ProjectDashboardNavbar ",
          "type": "default",
          "file": "src\\components\\navigation\\index.js"
        },
        {
          "name": "default as ProjectsSidebar ",
          "type": "default",
          "file": "src\\components\\navigation\\index.js"
        },
        {
          "name": "default as ProjectDashboardSidebar ",
          "type": "default",
          "file": "src\\components\\navigation\\index.js"
        }
      ],
      "lineCount": 12
    },
    "src\\components\\navigation\\navbar.js": {
      "functions": [
        "Navbar"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\navigation\\navbar.js"
        },
        {
          "items": [
            "Logo"
          ],
          "source": "../ui",
          "type": "named",
          "file": "src\\components\\navigation\\navbar.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\navigation\\navbar.js"
        },
        {
          "items": [],
          "source": "./navbar.css",
          "type": "side-effect",
          "file": "src\\components\\navigation\\navbar.js"
        }
      ],
      "exports": [
        {
          "name": "Navbar",
          "type": "default",
          "file": "src\\components\\navigation\\navbar.js"
        }
      ],
      "lineCount": 205
    },
    "src\\components\\navigation\\project-dashboard-navbar.js": {
      "functions": [
        "ProjectDashboardNavbar"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\navigation\\project-dashboard-navbar.js"
        },
        {
          "items": [
            "LogoProjects",
            "Logo"
          ],
          "source": "../ui",
          "type": "named",
          "file": "src\\components\\navigation\\project-dashboard-navbar.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\navigation\\project-dashboard-navbar.js"
        },
        {
          "items": [],
          "source": "./project-dashboard-navbar.css",
          "type": "side-effect",
          "file": "src\\components\\navigation\\project-dashboard-navbar.js"
        }
      ],
      "exports": [
        {
          "name": "ProjectDashboardNavbar",
          "type": "default",
          "file": "src\\components\\navigation\\project-dashboard-navbar.js"
        }
      ],
      "lineCount": 240
    },
    "src\\components\\navigation\\project-dashboard-sidebar.js": {
      "functions": [
        "ProjectDashboardSidebar"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\navigation\\project-dashboard-sidebar.js"
        },
        {
          "items": [],
          "source": "./project-dashboard-sidebar.css",
          "type": "side-effect",
          "file": "src\\components\\navigation\\project-dashboard-sidebar.js"
        }
      ],
      "exports": [
        {
          "name": "ProjectDashboardSidebar",
          "type": "default",
          "file": "src\\components\\navigation\\project-dashboard-sidebar.js"
        }
      ],
      "lineCount": 211
    },
    "src\\components\\navigation\\projects-navbar.js": {
      "functions": [
        "ProjectsNavbar"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\navigation\\projects-navbar.js"
        },
        {
          "items": [
            "LogoProjects",
            "Logo"
          ],
          "source": "../ui",
          "type": "named",
          "file": "src\\components\\navigation\\projects-navbar.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\navigation\\projects-navbar.js"
        },
        {
          "items": [],
          "source": "./projects-navbar.css",
          "type": "side-effect",
          "file": "src\\components\\navigation\\projects-navbar.js"
        }
      ],
      "exports": [
        {
          "name": "ProjectsNavbar",
          "type": "default",
          "file": "src\\components\\navigation\\projects-navbar.js"
        }
      ],
      "lineCount": 179
    },
    "src\\components\\navigation\\projects-sidebar.js": {
      "functions": [
        "ProjectsSidebar"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\navigation\\projects-sidebar.js"
        },
        {
          "items": [],
          "source": "./projects-sidebar.css",
          "type": "side-effect",
          "file": "src\\components\\navigation\\projects-sidebar.js"
        }
      ],
      "exports": [
        {
          "name": "ProjectsSidebar",
          "type": "default",
          "file": "src\\components\\navigation\\projects-sidebar.js"
        }
      ],
      "lineCount": 199
    },
    "src\\components\\projects\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as ProjectsMain ",
          "type": "default",
          "file": "src\\components\\projects\\index.js"
        },
        {
          "name": "default as MultiTradeRacks ",
          "type": "default",
          "file": "src\\components\\projects\\index.js"
        }
      ],
      "lineCount": 8
    },
    "src\\components\\projects\\multi-trade-racks.js": {
      "functions": [
        "MultiTradeRacks"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\projects\\multi-trade-racks.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\projects\\multi-trade-racks.js"
        },
        {
          "items": [],
          "source": "./multi-trade-racks.css",
          "type": "side-effect",
          "file": "src\\components\\projects\\multi-trade-racks.js"
        }
      ],
      "exports": [
        {
          "name": "MultiTradeRacks",
          "type": "default",
          "file": "src\\components\\projects\\multi-trade-racks.js"
        }
      ],
      "lineCount": 116
    },
    "src\\components\\projects\\projects-main.js": {
      "functions": [
        "ProjectsMain"
      ],
      "imports": [
        {
          "items": [
            "ProjectCard"
          ],
          "source": "../ui",
          "type": "named",
          "file": "src\\components\\projects\\projects-main.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\projects\\projects-main.js"
        },
        {
          "items": [],
          "source": "./projects-main.css",
          "type": "side-effect",
          "file": "src\\components\\projects\\projects-main.js"
        }
      ],
      "exports": [
        {
          "name": "ProjectsMain",
          "type": "default",
          "file": "src\\components\\projects\\projects-main.js"
        }
      ],
      "lineCount": 332
    },
    "src\\components\\ui\\app-ai-chat-panel.js": {
      "functions": [
        "AppAIChatPanel"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\ui\\app-ai-chat-panel.js"
        },
        {
          "items": [],
          "source": "./app-ai-chat-panel.css",
          "type": "side-effect",
          "file": "src\\components\\ui\\app-ai-chat-panel.js"
        }
      ],
      "exports": [
        {
          "name": "AppAIChatPanel",
          "type": "default",
          "file": "src\\components\\ui\\app-ai-chat-panel.js"
        }
      ],
      "lineCount": 77
    },
    "src\\components\\ui\\app-logo.js": {
      "functions": [
        "AppLogo"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\ui\\app-logo.js"
        },
        {
          "items": [],
          "source": "./app-logo.css",
          "type": "side-effect",
          "file": "src\\components\\ui\\app-logo.js"
        }
      ],
      "exports": [
        {
          "name": "AppLogo",
          "type": "default",
          "file": "src\\components\\ui\\app-logo.js"
        }
      ],
      "lineCount": 48
    },
    "src\\components\\ui\\assembly-card.js": {
      "functions": [
        "AssemblyCard"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\ui\\assembly-card.js"
        },
        {
          "items": [],
          "source": "./assembly-card.css",
          "type": "side-effect",
          "file": "src\\components\\ui\\assembly-card.js"
        }
      ],
      "exports": [
        {
          "name": "AssemblyCard",
          "type": "default",
          "file": "src\\components\\ui\\assembly-card.js"
        }
      ],
      "lineCount": 80
    },
    "src\\components\\ui\\hero.js": {
      "functions": [
        "Hero"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\ui\\hero.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\ui\\hero.js"
        },
        {
          "items": [],
          "source": "./hero.css",
          "type": "side-effect",
          "file": "src\\components\\ui\\hero.js"
        }
      ],
      "exports": [
        {
          "name": "Hero",
          "type": "default",
          "file": "src\\components\\ui\\hero.js"
        }
      ],
      "lineCount": 85
    },
    "src\\components\\ui\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as AppAIChatPanel ",
          "type": "default",
          "file": "src\\components\\ui\\index.js"
        },
        {
          "name": "default as Hero ",
          "type": "default",
          "file": "src\\components\\ui\\index.js"
        },
        {
          "name": "default as Logo ",
          "type": "default",
          "file": "src\\components\\ui\\index.js"
        },
        {
          "name": "default as AppLogo ",
          "type": "default",
          "file": "src\\components\\ui\\index.js"
        },
        {
          "name": "default as LogoProjects ",
          "type": "default",
          "file": "src\\components\\ui\\index.js"
        },
        {
          "name": "default as AssemblyCard ",
          "type": "default",
          "file": "src\\components\\ui\\index.js"
        },
        {
          "name": "default as ProjectCard ",
          "type": "default",
          "file": "src\\components\\ui\\index.js"
        }
      ],
      "lineCount": 13
    },
    "src\\components\\ui\\logo-projects.js": {
      "functions": [
        "LogoProjects"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\ui\\logo-projects.js"
        },
        {
          "items": [],
          "source": "./logo-projects.css",
          "type": "side-effect",
          "file": "src\\components\\ui\\logo-projects.js"
        }
      ],
      "exports": [
        {
          "name": "LogoProjects",
          "type": "default",
          "file": "src\\components\\ui\\logo-projects.js"
        }
      ],
      "lineCount": 48
    },
    "src\\components\\ui\\logo.js": {
      "functions": [
        "Logo"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\components\\ui\\logo.js"
        },
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\ui\\logo.js"
        },
        {
          "items": [],
          "source": "./logo.css",
          "type": "side-effect",
          "file": "src\\components\\ui\\logo.js"
        }
      ],
      "exports": [
        {
          "name": "Logo",
          "type": "default",
          "file": "src\\components\\ui\\logo.js"
        }
      ],
      "lineCount": 50
    },
    "src\\components\\ui\\project-card.js": {
      "functions": [
        "ProjectCard"
      ],
      "imports": [
        {
          "items": [
            "PropTypes"
          ],
          "source": "prop-types",
          "type": "default",
          "file": "src\\components\\ui\\project-card.js"
        },
        {
          "items": [],
          "source": "./project-card.css",
          "type": "side-effect",
          "file": "src\\components\\ui\\project-card.js"
        }
      ],
      "exports": [
        {
          "name": "ProjectCard",
          "type": "default",
          "file": "src\\components\\ui\\project-card.js"
        }
      ],
      "lineCount": 87
    },
    "src\\handlers\\configurationHandlers.js": {
      "functions": [
        "createConfigurationHandlers",
        "handleBuildingSave",
        "handleAddRack",
        "handleConfigurationSaved",
        "handleRestoreConfiguration",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "updateBuildingShell",
            "updateTradeRackConfiguration",
            "setActiveConfiguration"
          ],
          "source": "../utils/projectManifest",
          "type": "named",
          "file": "src\\handlers\\configurationHandlers.js"
        }
      ],
      "exports": [
        {
          "name": "createConfigurationHandlers",
          "type": "named",
          "file": "src\\handlers\\configurationHandlers.js"
        }
      ],
      "lineCount": 189
    },
    "src\\handlers\\mepHandlers.js": {
      "functions": [
        "selectDuct",
        "selectPipe",
        "selectConduit",
        "selectCableTray",
        "updateDuctColor",
        "updatePipeColor",
        "updateConduitColor",
        "updateCableTrayColor",
        "createMEPHandlers",
        "handleAddMepItem",
        "handleRemoveMepItem",
        "handleDeleteAllMepItems",
        "handleMepItemClick",
        "handleDuctColorChange",
        "if",
        "forEach"
      ],
      "imports": [
        {
          "items": [
            "updateMEPItems",
            "addMEPItem",
            "removeMEPItem"
          ],
          "source": "../utils/projectManifest",
          "type": "named",
          "file": "src\\handlers\\mepHandlers.js"
        }
      ],
      "exports": [
        {
          "name": "createMEPHandlers",
          "type": "named",
          "file": "src\\handlers\\mepHandlers.js"
        }
      ],
      "lineCount": 362
    },
    "src\\handlers\\uiHandlers.js": {
      "functions": [
        "createUIHandlers",
        "handleMeasurementToggle",
        "handleClearMeasurements",
        "handleViewModeChange",
        "handleFitView",
        "handleToggleAddMEP",
        "createMEPPanelHandler",
        "if"
      ],
      "imports": [
        {
          "items": [
            "updateMeasurements"
          ],
          "source": "../utils/projectManifest",
          "type": "named",
          "file": "src\\handlers\\uiHandlers.js"
        }
      ],
      "exports": [
        {
          "name": "createUIHandlers",
          "type": "named",
          "file": "src\\handlers\\uiHandlers.js"
        }
      ],
      "lineCount": 74
    },
    "src\\hooks\\useAppState.js": {
      "functions": [
        "useAppState",
        "getInitialUIState",
        "handleProjectNameChange",
        "handlePanelClick",
        "catch",
        "if"
      ],
      "imports": [
        {
          "items": [
            "useState",
            "useEffect"
          ],
          "source": "react",
          "type": "named",
          "file": "src\\hooks\\useAppState.js"
        },
        {
          "items": [
            "buildingShellDefaults"
          ],
          "source": "../types/buildingShell",
          "type": "named",
          "file": "src\\hooks\\useAppState.js"
        },
        {
          "items": [
            "tradeRackDefaults"
          ],
          "source": "../types/tradeRack",
          "type": "named",
          "file": "src\\hooks\\useAppState.js"
        },
        {
          "items": [
            "updateUIState",
            "setActiveConfiguration",
            "updateBuildingShell",
            "updateTradeRackConfiguration"
          ],
          "source": "../utils/projectManifest",
          "type": "named",
          "file": "src\\hooks\\useAppState.js"
        }
      ],
      "exports": [
        {
          "name": "useAppState",
          "type": "named",
          "file": "src\\hooks\\useAppState.js"
        }
      ],
      "lineCount": 197
    },
    "src\\hooks\\useBuildingRackSync.js": {
      "functions": [
        "useBuildingRackSync",
        "if"
      ],
      "imports": [
        {
          "items": [
            "useEffect"
          ],
          "source": "react",
          "type": "named",
          "file": "src\\hooks\\useBuildingRackSync.js"
        }
      ],
      "exports": [
        {
          "name": "useBuildingRackSync",
          "type": "named",
          "file": "src\\hooks\\useBuildingRackSync.js"
        }
      ],
      "lineCount": 55
    },
    "src\\hooks\\useEventListeners.js": {
      "functions": [
        "return",
        "useEventListeners",
        "handleMeasurementToolDeactivated",
        "handleMepItemsUpdated",
        "handleStorageChange",
        "handleGlobalKeyDown",
        "handleClickOutside",
        "handleClickOutsidePanels",
        "handleClickOutsideRackProperties",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "useEffect"
          ],
          "source": "react",
          "type": "named",
          "file": "src\\hooks\\useEventListeners.js"
        },
        {
          "items": [
            "updateMeasurements",
            "updateMEPItems"
          ],
          "source": "../utils/projectManifest",
          "type": "named",
          "file": "src\\hooks\\useEventListeners.js"
        }
      ],
      "exports": [
        {
          "name": "useEventListeners",
          "type": "named",
          "file": "src\\hooks\\useEventListeners.js"
        }
      ],
      "lineCount": 247
    },
    "src\\hooks\\useInitialization.js": {
      "functions": [
        "useInitialization",
        "catch",
        "if"
      ],
      "imports": [
        {
          "items": [
            "useEffect"
          ],
          "source": "react",
          "type": "named",
          "file": "src\\hooks\\useInitialization.js"
        },
        {
          "items": [
            "initializeProject",
            "syncManifestWithLocalStorage",
            "syncMEPItemsWithLocalStorage",
            "updateMEPItems"
          ],
          "source": "../utils/projectManifest",
          "type": "named",
          "file": "src\\hooks\\useInitialization.js"
        }
      ],
      "exports": [
        {
          "name": "useInitialization",
          "type": "named",
          "file": "src\\hooks\\useInitialization.js"
        }
      ],
      "lineCount": 90
    },
    "src\\hooks\\useSceneRack.js": {
      "functions": [
        "useSceneRack",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "useRef",
            "useCallback"
          ],
          "source": "react",
          "type": "named",
          "file": "src\\hooks\\useSceneRack.js"
        },
        {
          "items": [
            "buildRackScene"
          ],
          "source": "../components/3d/trade-rack/buildRack",
          "type": "named",
          "file": "src\\hooks\\useSceneRack.js"
        }
      ],
      "exports": [
        {
          "name": "useSceneRack",
          "type": "named",
          "file": "src\\hooks\\useSceneRack.js"
        }
      ],
      "lineCount": 68
    },
    "src\\hooks\\useSceneShell.js": {
      "functions": [
        "useSceneShell",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "useRef",
            "useCallback"
          ],
          "source": "react",
          "type": "named",
          "file": "src\\hooks\\useSceneShell.js"
        },
        {
          "items": [
            "buildShell",
            "buildFloorOnly"
          ],
          "source": "../components/3d/core/utils",
          "type": "named",
          "file": "src\\hooks\\useSceneShell.js"
        }
      ],
      "exports": [
        {
          "name": "useSceneShell",
          "type": "named",
          "file": "src\\hooks\\useSceneShell.js"
        }
      ],
      "lineCount": 107
    },
    "src\\index.js": {
      "functions": [
        "App"
      ],
      "imports": [
        {
          "items": [
            "BrowserRouter as Router",
            "Route",
            "Switch",
            "Redirect",
            ""
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\index.js"
        },
        {
          "items": [
            "ProjectDashboard",
            "Projects",
            "Home",
            "AppPage",
            "SignupPage",
            "Login",
            "NotFound"
          ],
          "source": "./pages",
          "type": "named",
          "file": "src\\index.js"
        },
        {
          "items": [
            "React"
          ],
          "source": "react",
          "type": "default",
          "file": "src\\index.js"
        },
        {
          "items": [
            "ReactDOM"
          ],
          "source": "react-dom",
          "type": "default",
          "file": "src\\index.js"
        },
        {
          "items": [],
          "source": "./style.css",
          "type": "side-effect",
          "file": "src\\index.js"
        }
      ],
      "exports": [],
      "lineCount": 45
    },
    "src\\pages\\app-page.js": {
      "functions": [
        "AppPage",
        "handleAddRack",
        "if"
      ],
      "imports": [
        {
          "items": [
            "Helmet"
          ],
          "source": "react-helmet",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "AppTopMainMenu",
            "AppBottomOptions"
          ],
          "source": "../components/layout",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "AppButtonLeftMenu"
          ],
          "source": "../components/navigation",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "AppRackProperties",
            "AppSavedConfigurations",
            "AppTierMEP",
            "AppAddMEP",
            "AppDuctwork",
            "AppPiping",
            "AppConduits",
            "AppCableTrays"
          ],
          "source": "../components/mep",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "AppAIChatPanel"
          ],
          "source": "../components/ui",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "AppManualBuilding"
          ],
          "source": "../components/forms",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "ThreeScene"
          ],
          "source": "../components/3d",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "useSceneShell"
          ],
          "source": "../hooks/useSceneShell",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "useSceneRack"
          ],
          "source": "../hooks/useSceneRack",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "useAppState"
          ],
          "source": "../hooks/useAppState",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "useInitialization"
          ],
          "source": "../hooks/useInitialization",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "useBuildingRackSync"
          ],
          "source": "../hooks/useBuildingRackSync",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "useEventListeners"
          ],
          "source": "../hooks/useEventListeners",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "createMEPHandlers"
          ],
          "source": "../handlers/mepHandlers",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "createConfigurationHandlers"
          ],
          "source": "../handlers/configurationHandlers",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [
            "createUIHandlers"
          ],
          "source": "../handlers/uiHandlers",
          "type": "named",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [],
          "source": "../utils/manifestExporter",
          "type": "side-effect",
          "file": "src\\pages\\app-page.js"
        },
        {
          "items": [],
          "source": "./app-page.css",
          "type": "side-effect",
          "file": "src\\pages\\app-page.js"
        }
      ],
      "exports": [
        {
          "name": "AppPage",
          "type": "default",
          "file": "src\\pages\\app-page.js"
        }
      ],
      "lineCount": 357
    },
    "src\\pages\\home.js": {
      "functions": [
        "Home"
      ],
      "imports": [
        {
          "items": [
            "Helmet"
          ],
          "source": "react-helmet",
          "type": "named",
          "file": "src\\pages\\home.js"
        },
        {
          "items": [
            "Navbar"
          ],
          "source": "../components/navigation",
          "type": "named",
          "file": "src\\pages\\home.js"
        },
        {
          "items": [
            "Hero"
          ],
          "source": "../components/ui",
          "type": "named",
          "file": "src\\pages\\home.js"
        },
        {
          "items": [
            "MultiTradeRacks"
          ],
          "source": "../components/projects",
          "type": "named",
          "file": "src\\pages\\home.js"
        },
        {
          "items": [
            "Footer"
          ],
          "source": "../components/layout",
          "type": "named",
          "file": "src\\pages\\home.js"
        },
        {
          "items": [],
          "source": "./home.css",
          "type": "side-effect",
          "file": "src\\pages\\home.js"
        }
      ],
      "exports": [
        {
          "name": "Home",
          "type": "default",
          "file": "src\\pages\\home.js"
        }
      ],
      "lineCount": 187
    },
    "src\\pages\\index.js": {
      "functions": [],
      "imports": [],
      "exports": [
        {
          "name": "default as AppPage ",
          "type": "default",
          "file": "src\\pages\\index.js"
        },
        {
          "name": "default as Home ",
          "type": "default",
          "file": "src\\pages\\index.js"
        },
        {
          "name": "default as Login ",
          "type": "default",
          "file": "src\\pages\\index.js"
        },
        {
          "name": "default as NotFound ",
          "type": "default",
          "file": "src\\pages\\index.js"
        },
        {
          "name": "default as ProjectDashboard ",
          "type": "default",
          "file": "src\\pages\\index.js"
        },
        {
          "name": "default as Projects ",
          "type": "default",
          "file": "src\\pages\\index.js"
        },
        {
          "name": "default as SignupPage ",
          "type": "default",
          "file": "src\\pages\\index.js"
        }
      ],
      "lineCount": 13
    },
    "src\\pages\\login.js": {
      "functions": [
        "Login"
      ],
      "imports": [
        {
          "items": [
            "Helmet"
          ],
          "source": "react-helmet",
          "type": "named",
          "file": "src\\pages\\login.js"
        },
        {
          "items": [
            "Navbar"
          ],
          "source": "../components/navigation",
          "type": "named",
          "file": "src\\pages\\login.js"
        },
        {
          "items": [
            "SignIn"
          ],
          "source": "../components/forms",
          "type": "named",
          "file": "src\\pages\\login.js"
        },
        {
          "items": [
            "Footer"
          ],
          "source": "../components/layout",
          "type": "named",
          "file": "src\\pages\\login.js"
        },
        {
          "items": [],
          "source": "./login.css",
          "type": "side-effect",
          "file": "src\\pages\\login.js"
        }
      ],
      "exports": [
        {
          "name": "Login",
          "type": "default",
          "file": "src\\pages\\login.js"
        }
      ],
      "lineCount": 136
    },
    "src\\pages\\not-found.js": {
      "functions": [
        "NotFound"
      ],
      "imports": [
        {
          "items": [
            "Helmet"
          ],
          "source": "react-helmet",
          "type": "named",
          "file": "src\\pages\\not-found.js"
        },
        {
          "items": [
            "React"
          ],
          "source": "react",
          "type": "default",
          "file": "src\\pages\\not-found.js"
        },
        {
          "items": [],
          "source": "./not-found.css",
          "type": "side-effect",
          "file": "src\\pages\\not-found.js"
        }
      ],
      "exports": [
        {
          "name": "NotFound",
          "type": "default",
          "file": "src\\pages\\not-found.js"
        }
      ],
      "lineCount": 33
    },
    "src\\pages\\project-dashboard.js": {
      "functions": [
        "ProjectDashboard"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\pages\\project-dashboard.js"
        },
        {
          "items": [
            "Helmet"
          ],
          "source": "react-helmet",
          "type": "named",
          "file": "src\\pages\\project-dashboard.js"
        },
        {
          "items": [
            "ProjectDashboardNavbar",
            "ProjectDashboardSidebar"
          ],
          "source": "../components/navigation",
          "type": "named",
          "file": "src\\pages\\project-dashboard.js"
        },
        {
          "items": [
            "AssemblyCard"
          ],
          "source": "../components/ui",
          "type": "named",
          "file": "src\\pages\\project-dashboard.js"
        },
        {
          "items": [],
          "source": "./project-dashboard.css",
          "type": "side-effect",
          "file": "src\\pages\\project-dashboard.js"
        }
      ],
      "exports": [
        {
          "name": "ProjectDashboard",
          "type": "default",
          "file": "src\\pages\\project-dashboard.js"
        }
      ],
      "lineCount": 293
    },
    "src\\pages\\projects.js": {
      "functions": [
        "Projects"
      ],
      "imports": [
        {
          "items": [
            "Link"
          ],
          "source": "react-router-dom",
          "type": "named",
          "file": "src\\pages\\projects.js"
        },
        {
          "items": [
            "Helmet"
          ],
          "source": "react-helmet",
          "type": "named",
          "file": "src\\pages\\projects.js"
        },
        {
          "items": [
            "ProjectsNavbar",
            "ProjectsSidebar"
          ],
          "source": "../components/navigation",
          "type": "named",
          "file": "src\\pages\\projects.js"
        },
        {
          "items": [
            "ProjectCard"
          ],
          "source": "../components/ui",
          "type": "named",
          "file": "src\\pages\\projects.js"
        },
        {
          "items": [],
          "source": "./projects.css",
          "type": "side-effect",
          "file": "src\\pages\\projects.js"
        }
      ],
      "exports": [
        {
          "name": "Projects",
          "type": "default",
          "file": "src\\pages\\projects.js"
        }
      ],
      "lineCount": 414
    },
    "src\\pages\\signup-page.js": {
      "functions": [
        "SignupPage"
      ],
      "imports": [
        {
          "items": [
            "Helmet"
          ],
          "source": "react-helmet",
          "type": "named",
          "file": "src\\pages\\signup-page.js"
        },
        {
          "items": [
            "Navbar"
          ],
          "source": "../components/navigation",
          "type": "named",
          "file": "src\\pages\\signup-page.js"
        },
        {
          "items": [
            "SignUp"
          ],
          "source": "../components/forms",
          "type": "named",
          "file": "src\\pages\\signup-page.js"
        },
        {
          "items": [
            "Footer"
          ],
          "source": "../components/layout",
          "type": "named",
          "file": "src\\pages\\signup-page.js"
        },
        {
          "items": [],
          "source": "./signup-page.css",
          "type": "side-effect",
          "file": "src\\pages\\signup-page.js"
        }
      ],
      "exports": [
        {
          "name": "SignupPage",
          "type": "default",
          "file": "src\\pages\\signup-page.js"
        }
      ],
      "lineCount": 134
    },
    "src\\types\\buildingShell.js": {
      "functions": [
        "convertToFeet"
      ],
      "imports": [],
      "exports": [
        {
          "name": "buildingShellDefaults",
          "type": "named",
          "file": "src\\types\\buildingShell.js"
        },
        {
          "name": "convertToFeet",
          "type": "named",
          "file": "src\\types\\buildingShell.js"
        }
      ],
      "lineCount": 26
    },
    "src\\types\\tradeRack.js": {
      "functions": [
        "convertToFeet",
        "calculateTotalHeight",
        "calculateBayConfiguration",
        "if",
        "catch"
      ],
      "imports": [],
      "exports": [
        {
          "name": "tradeRackDefaults",
          "type": "named",
          "file": "src\\types\\tradeRack.js"
        },
        {
          "name": "convertToFeet",
          "type": "named",
          "file": "src\\types\\tradeRack.js"
        },
        {
          "name": "calculateTotalHeight",
          "type": "named",
          "file": "src\\types\\tradeRack.js"
        },
        {
          "name": "calculateBayConfiguration",
          "type": "named",
          "file": "src\\types\\tradeRack.js"
        }
      ],
      "lineCount": 115
    },
    "src\\utils\\fileOperations.js": {
      "functions": [
        "exportConfigurationsToFile",
        "importConfigurationsFromFile",
        "saveConfigurationsToLocalStorage",
        "loadConfigurationsFromLocalStorage",
        "generateExportFilename",
        "catch",
        "if"
      ],
      "imports": [],
      "exports": [
        {
          "name": "exportConfigurationsToFile",
          "type": "named",
          "file": "src\\utils\\fileOperations.js"
        },
        {
          "name": "importConfigurationsFromFile",
          "type": "named",
          "file": "src\\utils\\fileOperations.js"
        },
        {
          "name": "saveConfigurationsToLocalStorage",
          "type": "named",
          "file": "src\\utils\\fileOperations.js"
        },
        {
          "name": "loadConfigurationsFromLocalStorage",
          "type": "named",
          "file": "src\\utils\\fileOperations.js"
        },
        {
          "name": "generateExportFilename",
          "type": "named",
          "file": "src\\utils\\fileOperations.js"
        }
      ],
      "lineCount": 188
    },
    "src\\utils\\manifestExporter.js": {
      "functions": [
        "logManifestToConsole",
        "downloadManifest",
        "getManifestInfo",
        "if",
        "catch"
      ],
      "imports": [
        {
          "items": [
            "exportProjectManifest",
            "getProjectStatistics"
          ],
          "source": "./projectManifest",
          "type": "named",
          "file": "src\\utils\\manifestExporter.js"
        }
      ],
      "exports": [
        {
          "name": "logManifestToConsole",
          "type": "named",
          "file": "src\\utils\\manifestExporter.js"
        },
        {
          "name": "downloadManifest",
          "type": "named",
          "file": "src\\utils\\manifestExporter.js"
        },
        {
          "name": "getManifestInfo",
          "type": "named",
          "file": "src\\utils\\manifestExporter.js"
        }
      ],
      "lineCount": 138
    },
    "src\\utils\\projectManifest.js": {
      "functions": [
        "createInitialManifest",
        "getProjectManifest",
        "saveProjectManifest",
        "updateBuildingShell",
        "updateTradeRackConfiguration",
        "deleteTradeRackConfiguration",
        "setActiveConfiguration",
        "syncManifestWithLocalStorage",
        "mapTypeToCategory",
        "updateMEPItems",
        "syncMEPItemsWithLocalStorage",
        "addMEPItem",
        "removeMEPItem",
        "updateUIState",
        "updateMeasurements",
        "addChangeToHistory",
        "validateAndMigrateManifest",
        "getSessionId",
        "exportProjectManifest",
        "getProjectStatistics",
        "initializeProject",
        "if",
        "catch"
      ],
      "imports": [],
      "exports": [
        {
          "name": "createInitialManifest",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "getProjectManifest",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "saveProjectManifest",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "updateBuildingShell",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "updateTradeRackConfiguration",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "deleteTradeRackConfiguration",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "setActiveConfiguration",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "syncManifestWithLocalStorage",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "updateMEPItems",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "syncMEPItemsWithLocalStorage",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "addMEPItem",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "removeMEPItem",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "updateUIState",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "updateMeasurements",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "exportProjectManifest",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "getProjectStatistics",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        },
        {
          "name": "initializeProject",
          "type": "named",
          "file": "src\\utils\\projectManifest.js"
        }
      ],
      "lineCount": 580
    }
  },
  "functions": {
    "CableTrayEditor": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "named export",
        "description": {
          "summary": "CableTrayEditor - Compact horizontal editor for cable tray dimensions",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "{ \r\n  selectedCableTray",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "renderer",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onSave",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCancel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCopy",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "visible",
            "hasDefault": true,
            "defaultValue": "true",
            "type": "boolean"
          },
          {
            "name": "rackParams",
            "hasDefault": true,
            "defaultValue": "{}\r\n}",
            "type": "object"
          }
        ],
        "lineNumber": 22,
        "signature": "export const CableTrayEditor = ({ \r\n  selectedCableTray, \r\n  camera, \r\n  renderer, \r\n  onSave, \r\n  o..."
      }
    ],
    "updatePosition": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Updates ateposition",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 69,
        "signature": "const updatePosition = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Updates ateposition",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 121,
        "signature": "const updatePosition = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Updates ateposition",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 60,
        "signature": "const updatePosition = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Updates ateposition",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 76,
        "signature": "const updatePosition = () =>"
      }
    ],
    "handleDimensionChange": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles dimensionchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 100,
        "signature": "const handleDimensionChange = (field, value) =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles dimensionchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 95,
        "signature": "const handleDimensionChange = (field, value) =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles dimensionchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 143,
        "signature": "const handleDimensionChange = (field, value) =>"
      }
    ],
    "handleTrayTypeChange": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles traytypechange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newTrayType",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 110,
        "signature": "const handleTrayTypeChange = (newTrayType) =>"
      }
    ],
    "handleTierChange": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles tierchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newTier",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 123,
        "signature": "const handleTierChange = (newTier) =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles tierchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newTier",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 105,
        "signature": "const handleTierChange = (newTier) =>"
      }
    ],
    "getTierOptions": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Generate tier options based on actual geometry from snap lines",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 172,
        "signature": "const getTierOptions = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Get available tier options from scene geometry",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 38,
        "signature": "const getTierOptions = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Generate tier options based on actual geometry from snap lines",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 170,
        "signature": "const getTierOptions = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Get available tier options from scene geometry",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 44,
        "signature": "const getTierOptions = () =>"
      }
    ],
    "handleSave": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles save events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 177,
        "signature": "const handleSave = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles save events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 209,
        "signature": "const handleSave = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles save events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 175,
        "signature": "const handleSave = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles save events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 220,
        "signature": "const handleSave = () =>"
      },
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles save events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 100,
        "signature": "const handleSave = () =>"
      }
    ],
    "handleCancel": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles cancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 186,
        "signature": "const handleCancel = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles cancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 216,
        "signature": "const handleCancel = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles cancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 183,
        "signature": "const handleCancel = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles cancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 226,
        "signature": "const handleCancel = () =>"
      }
    ],
    "handleCopy": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles copy events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 202,
        "signature": "const handleCopy = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles copy events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 222,
        "signature": "const handleCopy = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles copy events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 199,
        "signature": "const handleCopy = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles copy events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 232,
        "signature": "const handleCopy = () =>"
      }
    ],
    "if": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "selectedCableTray?.userData?.cableTrayData",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 45,
        "signature": "if (selectedCableTray?.userData?.cableTrayData) {"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "method",
        "description": {
          "summary": "Try to get tier options from the snap line manager",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "window.conduitRendererInstance?.snapLineManager",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 41,
        "signature": "if (window.conduitRendererInstance?.snapLineManager) {"
      },
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "method",
        "description": {
          "summary": "Check for old format first (postSize or columnSize directly)",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "rackParams?.postSize && rackParams.postSize > 0",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 16,
        "signature": "if (rackParams?.postSize && rackParams.postSize > 0) {"
      },
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "typeof feetInches",
            "hasDefault": true,
            "defaultValue": "",
            "type": "any"
          }
        ],
        "lineNumber": 114,
        "signature": "if (typeof feetInches === 'number') {"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "selectedDuct?.userData?.ductData",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 45,
        "signature": "if (selectedDuct?.userData?.ductData) {"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "method",
        "description": {
          "summary": "If we got a valid result, use it, otherwise fallback to rackParams",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "tiers.length > 0 && tiers.length !",
            "hasDefault": true,
            "defaultValue": "",
            "type": "any"
          }
        ],
        "lineNumber": 49,
        "signature": "if (tiers.length > 0 && tiers.length !== 2) {"
      },
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "window.sceneViewModeHandler",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 176,
        "signature": "if (window.sceneViewModeHandler) {"
      },
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "type": "method",
        "description": {
          "summary": "Set initial position if provided in params",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "params.position",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 77,
        "signature": "if (params.position) {"
      },
      {
        "file": "src\\components\\3d\\ui\\chatInterface.js",
        "type": "method",
        "description": {
          "summary": "1. Obtain API key once",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "!apiKey",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 111,
        "signature": "if (!apiKey) {"
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "!canvas || !canvas.clientWidth || !canvas.clientHeight",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          }
        ],
        "lineNumber": 50,
        "signature": "if (!canvas || !canvas.clientWidth || !canvas.clientHeight) {"
      },
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "ceilingHeightTotal > corridorHeightTotal",
            "hasDefault": false,
            "defaultValue": null,
            "type": "string"
          }
        ],
        "lineNumber": 42,
        "signature": "if (ceilingHeightTotal > corridorHeightTotal) {"
      },
      {
        "file": "src\\components\\layout\\app-bottom-options.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "onViewModeChange",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 19,
        "signature": "if (onViewModeChange) {"
      },
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "isEditing && inputRef.current",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          }
        ],
        "lineNumber": 25,
        "signature": "if (isEditing && inputRef.current) {"
      },
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "widthInches <",
            "hasDefault": true,
            "defaultValue": "0",
            "type": "number"
          }
        ],
        "lineNumber": 46,
        "signature": "if (widthInches <= 0) {"
      },
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "diameterInches <",
            "hasDefault": true,
            "defaultValue": "0",
            "type": "number"
          }
        ],
        "lineNumber": 48,
        "signature": "if (diameterInches <= 0) {"
      },
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "widthInches <",
            "hasDefault": true,
            "defaultValue": "0",
            "type": "number"
          }
        ],
        "lineNumber": 45,
        "signature": "if (widthInches <= 0) {"
      },
      {
        "file": "src\\components\\mep\\app-piping.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "diameterInches <",
            "hasDefault": true,
            "defaultValue": "0",
            "type": "number"
          }
        ],
        "lineNumber": 44,
        "signature": "if (diameterInches <= 0) {"
      },
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "saved",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 24,
        "signature": "if (saved) {"
      },
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "showColorPicker",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 46,
        "signature": "if (showColorPicker) {"
      },
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "savedRackParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 37,
        "signature": "if (savedRackParams) {"
      },
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "method",
        "description": {
          "summary": "Update manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemToRemove",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 49,
        "signature": "if (itemToRemove) {"
      },
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "window.measurementToolInstance",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 31,
        "signature": "if (window.measurementToolInstance) {"
      },
      {
        "file": "src\\hooks\\useAppState.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "savedBuildingShell",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 63,
        "signature": "if (savedBuildingShell) {"
      },
      {
        "file": "src\\hooks\\useBuildingRackSync.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "rackParams && tradeRack.update && isConfigLoaded",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          }
        ],
        "lineNumber": 22,
        "signature": "if (rackParams && tradeRack.update && isConfigLoaded) {"
      },
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event.detail && event.detail.updatedItems",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 44,
        "signature": "if (event.detail && event.detail.updatedItems) {"
      },
      {
        "file": "src\\hooks\\useInitialization.js",
        "type": "method",
        "description": {
          "summary": "Switch building shell mode based on mount type",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "buildingShell.switchMode",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 57,
        "signature": "if (buildingShell.switchMode) {"
      },
      {
        "file": "src\\hooks\\useSceneRack.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "!scene || !materials",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 27,
        "signature": "if (!scene || !materials) {"
      },
      {
        "file": "src\\hooks\\useSceneShell.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "currentGroupRef.current",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 23,
        "signature": "if (currentGroupRef.current) {"
      },
      {
        "file": "src\\pages\\app-page.js",
        "type": "method",
        "description": {
          "summary": "Update ductwork renderer with actual rack parameters",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "window.ductworkRendererInstance",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 288,
        "signature": "if (window.ductworkRendererInstance) {"
      },
      {
        "file": "src\\types\\tradeRack.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "tierHeights.length",
            "hasDefault": true,
            "defaultValue": "",
            "type": "any"
          }
        ],
        "lineNumber": 51,
        "signature": "if (tierHeights.length === 0) {"
      },
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "file.size > maxSize",
            "hasDefault": false,
            "defaultValue": null,
            "type": "number"
          }
        ],
        "lineNumber": 72,
        "signature": "if (file.size > maxSize) {"
      },
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "manifest.buildingShell.parameters",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 27,
        "signature": "if (manifest.buildingShell.parameters) {"
      },
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "method",
        "description": {
          "summary": "Function: if",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "stored",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 96,
        "signature": "if (stored) {"
      }
    ],
    "catch": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 153,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 80,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 33,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 143,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 107,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "method",
        "description": {
          "summary": "console.log('💾 Camera state saved:', cameraState)",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 351,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\3d\\ui\\chatInterface.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "err",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 185,
        "signature": "catch (err) {"
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 65,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 40,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 152,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 40,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\hooks\\useAppState.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 27,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 54,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\hooks\\useInitialization.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 46,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\hooks\\useSceneRack.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 45,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\hooks\\useSceneShell.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 78,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\types\\tradeRack.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 86,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 50,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 102,
        "signature": "catch (error) {"
      },
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "method",
        "description": {
          "summary": "Function: catch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "error",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 105,
        "signature": "catch (error) {"
      }
    ],
    "onTransformChange": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles sformchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 54,
        "signature": "const onTransformChange = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles sformchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 63,
        "signature": "const onTransformChange = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles sformchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 50,
        "signature": "const onTransformChange = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles sformchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 45,
        "signature": "const onTransformChange = () =>"
      }
    ],
    "onDragEnd": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles end events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 67,
        "signature": "const onDragEnd = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles end events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 72,
        "signature": "const onDragEnd = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles end events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 59,
        "signature": "const onDragEnd = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles end events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 54,
        "signature": "const onDragEnd = () =>"
      }
    ],
    "fallbackSetup": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: fallbackSetup",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 120,
        "signature": "const fallbackSetup = () =>"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: fallbackSetup",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 128,
        "signature": "const fallbackSetup = () =>"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: fallbackSetup",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 108,
        "signature": "const fallbackSetup = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeInteraction.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: fallbackSetup",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 104,
        "signature": "const fallbackSetup = () =>"
      }
    ],
    "ConduitEditorUI": [
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "named export",
        "description": {
          "summary": "ConduitEditorUI - Compact horizontal editor for conduit dimensions",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "{ \r\n  selectedConduit",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "renderer",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onSave",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCancel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCopy",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "visible",
            "hasDefault": true,
            "defaultValue": "true",
            "type": "boolean"
          },
          {
            "name": "rackParams",
            "hasDefault": true,
            "defaultValue": "{}\r\n}",
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "export const ConduitEditorUI = ({ \r\n  selectedConduit, \r\n  camera, \r\n  renderer, \r\n  onSave, \r\n  onC..."
      }
    ],
    "onCameraChange": [
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Update position when camera moves",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 181,
        "signature": "const onCameraChange = () =>"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Update position when camera moves",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 115,
        "signature": "const onCameraChange = () =>"
      }
    ],
    "handleInputChange": [
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles inputchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 228,
        "signature": "const handleInputChange = (field, value) =>"
      },
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles inputchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 81,
        "signature": "const handleInputChange = (field, value) =>"
      }
    ],
    "handleKeyDown": [
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles keydown events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 352,
        "signature": "const handleKeyDown = (event) =>"
      },
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles keydown events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "e",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 49,
        "signature": "const handleKeyDown = (e) =>"
      }
    ],
    "for": [
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "let i",
            "hasDefault": true,
            "defaultValue": "0; i < beamTops.length - 1; i++",
            "type": "any"
          }
        ],
        "lineNumber": 52,
        "signature": "for (let i = 0; i < beamTops.length - 1; i++) {"
      },
      {
        "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "let i",
            "hasDefault": true,
            "defaultValue": "0; i < vertexCount; i +",
            "type": "any"
          }
        ],
        "lineNumber": 25,
        "signature": "for (let i = 0; i < vertexCount; i += 3) {"
      },
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "let bay",
            "hasDefault": true,
            "defaultValue": "0; bay <",
            "type": "any"
          }
        ],
        "lineNumber": 238,
        "signature": "for (let bay = 0; bay <= bayCount; bay++) {"
      },
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "let i",
            "hasDefault": true,
            "defaultValue": "-size; i <",
            "type": "any"
          }
        ],
        "lineNumber": 128,
        "signature": "for (let i = -size; i <= size; i += step) {"
      },
      {
        "file": "src\\components\\3d\\ui\\chatInterface.js",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "const key of [\r\n        'tierHeights'",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "'ductEnabled'",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "'ductWidths'",
            "hasDefault": false,
            "defaultValue": null,
            "type": "string"
          },
          {
            "name": "'ductHeights'",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "'ductOffsets'",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "'pipeEnabled'\r\n      ]",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 215,
        "signature": "for (const key of [\r\n        'tierHeights','ductEnabled','ductWidths',\r\n        'ductHeights','ductO..."
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "let i",
            "hasDefault": true,
            "defaultValue": "0; i < allBeamPositions.length - 1; i++",
            "type": "any"
          }
        ],
        "lineNumber": 129,
        "signature": "for (let i = 0; i < allBeamPositions.length - 1; i++) {"
      },
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "let i",
            "hasDefault": true,
            "defaultValue": "0; i < formData.tierCount; i++",
            "type": "any"
          }
        ],
        "lineNumber": 144,
        "signature": "for (let i = 0; i < formData.tierCount; i++) {"
      },
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "method",
        "description": {
          "summary": "Function: for",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "let i",
            "hasDefault": true,
            "defaultValue": "0; i < allBeamPositions.length - 1; i++",
            "type": "any"
          }
        ],
        "lineNumber": 132,
        "signature": "for (let i = 0; i < allBeamPositions.length - 1; i++) {"
      }
    ],
    "animate": [
      {
        "file": "src\\components\\3d\\controls\\MeasurementTool.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: animate",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 173,
        "signature": "const animate = () =>"
      },
      {
        "file": "src\\components\\3d\\controls\\ViewCube.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: animate",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 179,
        "signature": "const animate = () =>"
      },
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "function declaration",
        "description": {
          "summary": "Function: animate",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 1097,
        "signature": "function animate()"
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: animate",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 412,
        "signature": "const animate = () =>"
      }
    ],
    "createLabelMaterial": [
      {
        "file": "src\\components\\3d\\controls\\ViewCube.js",
        "type": "function declaration",
        "description": {
          "summary": "Creates labelmaterial",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "label",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 10,
        "signature": "function createLabelMaterial(label)"
      }
    ],
    "extractSnapPoints": [
      {
        "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: extractSnapPoints",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "geometry",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "matrixWorld",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 9,
        "signature": "function extractSnapPoints(geometry, matrixWorld)"
      }
    ],
    "dedupe": [
      {
        "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: dedupe",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "points",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 82,
        "signature": "function dedupe(points)"
      }
    ],
    "getKey": [
      {
        "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js",
        "type": "arrow function",
        "description": {
          "summary": "Retrieves key",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "v",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 17,
        "signature": "const getKey = (v) =>"
      }
    ],
    "toVec3": [
      {
        "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: toVec3",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "i",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 18,
        "signature": "const toVec3 = (i) =>"
      }
    ],
    "initializeMepSelectionManager": [
      {
        "file": "src\\components\\3d\\core\\MepSelectionManager.js",
        "type": "function declaration",
        "description": {
          "summary": "Initialize global MEP selection manager",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "scene",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "renderer",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 496,
        "signature": "function initializeMepSelectionManager(scene, camera, renderer)"
      }
    ],
    "getMepSelectionManager": [
      {
        "file": "src\\components\\3d\\core\\MepSelectionManager.js",
        "type": "function declaration",
        "description": {
          "summary": "Get global MEP selection manager",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 512,
        "signature": "function getMepSelectionManager()"
      }
    ],
    "getColumnSize": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "function declaration",
        "description": {
          "summary": "Get the column/post size from rack parameters",
          "details": [
            "Handles both old format (postSize/columnSize) and new format (columnSizes with columnType)"
          ],
          "parameters": [
            {
              "name": "rackParams",
              "type": "Object",
              "description": "- The rack parameters object"
            }
          ],
          "returns": {
            "type": "number",
            "description": "- Column size in inches"
          }
        },
        "parameters": [
          {
            "name": "rackParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 11,
        "signature": "function getColumnSize(rackParams)"
      }
    ],
    "convertToFeet": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "function declaration",
        "description": {
          "summary": "Convert feet and inches object to total feet",
          "details": [],
          "parameters": [
            {
              "name": "value",
              "type": "Object|number",
              "description": "- Either a {feet, inches} object or a number"
            }
          ],
          "returns": {
            "type": "number",
            "description": "- Total feet"
          }
        },
        "parameters": [
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 46,
        "signature": "function convertToFeet(value)"
      },
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "arrow function",
        "description": {
          "summary": "Import convertToFeet utility with safety checks",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 113,
        "signature": "const convertToFeet = (feetInches) =>"
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Convert feet-inches object to feet",
          "details": [],
          "parameters": [
            {
              "name": "feetInches",
              "type": "Object|number",
              "description": "- Either a number or {feet, inches} object"
            }
          ],
          "returns": {
            "type": "number",
            "description": "Total feet value"
          }
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 350,
        "signature": "function convertToFeet(feetInches)"
      },
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "arrow function",
        "description": {
          "summary": "No unit conversion needed - everything is in feet/inches",
          "details": [
            "Helper to convert feet+inches to total feet for comparison"
          ],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 54,
        "signature": "const convertToFeet = (feetInches) =>"
      },
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Helper function for conversion",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 41,
        "signature": "const convertToFeet = (feetInches) =>"
      },
      {
        "file": "src\\types\\buildingShell.js",
        "type": "named export",
        "description": {
          "summary": "Utility to convert feet+inches to total feet for calculations",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 23,
        "signature": "export const convertToFeet = (feetInches) =>"
      },
      {
        "file": "src\\types\\tradeRack.js",
        "type": "named export",
        "description": {
          "summary": "Utility to convert feet+inches to total feet for calculations",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 41,
        "signature": "export const convertToFeet = (feetInches) =>"
      }
    ],
    "inchesToMeters": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "function declaration",
        "description": {
          "summary": "Convert inches to meters",
          "details": [],
          "parameters": [
            {
              "name": "inches",
              "type": "number",
              "description": "- Value in inches"
            }
          ],
          "returns": {
            "type": "number",
            "description": "- Value in meters"
          }
        },
        "parameters": [
          {
            "name": "inches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 59,
        "signature": "function inchesToMeters(inches)"
      }
    ],
    "feetToMeters": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "function declaration",
        "description": {
          "summary": "Convert feet to meters",
          "details": [],
          "parameters": [
            {
              "name": "feet",
              "type": "number",
              "description": "- Value in feet"
            }
          ],
          "returns": {
            "type": "number",
            "description": "- Value in meters"
          }
        },
        "parameters": [
          {
            "name": "feet",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 68,
        "signature": "function feetToMeters(feet)"
      }
    ],
    "addEdges": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Adds wireframe edges to a mesh for better visibility and definition",
          "details": [],
          "parameters": [
            {
              "name": "mesh",
              "type": "THREE.Mesh",
              "description": "- The mesh to add edges to"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "mesh",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "color",
            "hasDefault": true,
            "defaultValue": "0x333333",
            "type": "number"
          },
          {
            "name": "lineWidth",
            "hasDefault": true,
            "defaultValue": "0.5",
            "type": "number"
          },
          {
            "name": "opacity",
            "hasDefault": true,
            "defaultValue": "0.5",
            "type": "number"
          }
        ],
        "lineNumber": 65,
        "signature": "function addEdges(mesh, color = 0x333333, lineWidth = 0.5, opacity = 0.5)"
      }
    ],
    "buildRack": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Build a parametric pallet‑rack frame and return it as a {@link THREE.Group}.",
          "details": [
            "The rack is centred on the world origin in the *plan* (X–Z) plane and sits",
            "on Y = 0 (floor).",
            "Local axes:",
            "```",
            "X : length  (bays laid end‑to‑end)",
            "Y : height  (up)",
            "Z : depth   (front ↔ back)",
            "```",
            "Geometry notes**",
            "- **Posts** are square columns (`postSize × postSize` inches).",
            "- **Beams** are square members (`beamSize` inches) used for roof and for the",
            "bottom* of every tier.",
            "- The centre‑line of the roof beam is positioned at **`topClearance` ft**.",
            "- Tiers are defined *top‑to‑bottom* by their clear heights `tierHeights[]`."
          ],
          "parameters": [
            {
              "name": "p",
              "type": "Object",
              "description": "Rack parameters (feet unless noted)"
            },
            {
              "name": "p.bayCount",
              "type": "number",
              "description": "Number of bays along X (≥ 1)"
            },
            {
              "name": "p.bayWidth",
              "type": "number",
              "description": "Clear width of each bay (ft)"
            },
            {
              "name": "p.depth",
              "type": "number",
              "description": "Overall rack depth (ft, along Z)"
            },
            {
              "name": "p.postSize",
              "type": "number",
              "description": "Post width × depth (inches)"
            },
            {
              "name": "p.beamSize",
              "type": "number",
              "description": "Beam depth × width (inches)"
            },
            {
              "name": "p.topClearance",
              "type": "number",
              "description": "Y‑coord of roof‑beam centre (ft)"
            },
            {
              "name": "p.tierHeights",
              "type": "number[]",
              "description": "Clear tier heights *top → bottom* (ft)"
            }
          ],
          "returns": {
            "type": "THREE.Group",
            "description": "A group containing all posts and beams that make up"
          }
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "postMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "longBeamMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "transBeamMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "snapPoints",
            "hasDefault": true,
            "defaultValue": "[]",
            "type": "array"
          }
        ],
        "lineNumber": 109,
        "signature": "function buildRack(p, postMaterial, longBeamMaterial, transBeamMaterial, snapPoints = [])"
      }
    ],
    "createIBeamGeometry": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Creates a standard structural I-beam geometry with proper proportions",
          "details": [
            "Generates an I-beam with top flange, bottom flange, and connecting web"
          ],
          "parameters": [
            {
              "name": "depth",
              "type": "number",
              "description": "- Overall beam depth in inches"
            },
            {
              "name": "length",
              "type": "number",
              "description": "- Beam length in meters (pre-converted)"
            }
          ],
          "returns": {
            "type": "THREE.BufferGeometry",
            "description": "Complete I-beam geometry ready for mesh creation"
          }
        },
        "parameters": [
          {
            "name": "depth",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "length",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 366,
        "signature": "function createIBeamGeometry(depth, length)"
      }
    ],
    "buildShell": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Build a simple corridor “shell” (floor, intermediate ceiling, roof,",
          "details": [
            "front / back walls) that encloses the rack.",
            "The shell is centred on world‑origin in X and Z and sits on Y = 0.",
            "It is intentionally very lightweight: each slab / wall is a single",
            "{@link THREE.Mesh} using `shellMat`.",
            "Geometry reference",
            "```",
            "Y",
            "↑",
            "roofM ──┼────────── (roof slab)",
            "│",
            "ceilM ──┼────────── (intermediate ceiling slab)",
            "│",
            "floor ───┼────────── (floor slab at Y=0)",
            "└── Z (depth)",
            "```"
          ],
          "parameters": [
            {
              "name": "p",
              "type": "Object",
              "description": ""
            },
            {
              "name": "p.bayCount",
              "type": "number",
              "description": "Number of rack bays (used for shell length)"
            },
            {
              "name": "p.bayWidth",
              "type": "number",
              "description": "Width of one bay (ft)"
            },
            {
              "name": "p.corridorWidth",
              "type": "number",
              "description": "Inside corridor width  (ft, along Z)"
            },
            {
              "name": "p.corridorHeight",
              "type": "number",
              "description": "Total corridor height  (ft, along Y)"
            },
            {
              "name": "p.ceilingHeight",
              "type": "number",
              "description": "Height of the **intermediate** ceiling (ft)"
            }
          ],
          "returns": {
            "type": "THREE.Group",
            "description": "Group containing five meshes:"
          }
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "wallMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "ceilingMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "floorMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "roofMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "shellBeamMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "snapPoints",
            "hasDefault": true,
            "defaultValue": "[]",
            "type": "array"
          }
        ],
        "lineNumber": 471,
        "signature": "function buildShell(p, wallMaterial, ceilingMaterial, floorMaterial, roofMaterial, shellBeamMaterial..."
      }
    ],
    "buildFloorOnly": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Build floor-only shell for floor-mounted racks",
          "details": [
            "Only creates the floor plane without walls, ceiling, or roof"
          ],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "floorMaterial",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "snapPoints",
            "hasDefault": true,
            "defaultValue": "[]",
            "type": "array"
          }
        ],
        "lineNumber": 623,
        "signature": "function buildFloorOnly(p, floorMaterial, snapPoints = [])"
      }
    ],
    "tierHeightFt": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Gets the height of a specific tier in feet",
          "details": [],
          "parameters": [
            {
              "name": "p",
              "type": "Object",
              "description": "- Rack parameters containing tierHeights array"
            },
            {
              "name": "idx",
              "type": "number",
              "description": "- 1-based tier index"
            }
          ],
          "returns": {
            "type": "number",
            "description": "Tier height in feet"
          }
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "idx",
            "hasDefault": false,
            "defaultValue": null,
            "type": "string"
          }
        ],
        "lineNumber": 668,
        "signature": "function tierHeightFt(p,idx)"
      }
    ],
    "bottomBeamCenterY": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Calculates the Y-coordinate of the center of the bottom beam for a given tier",
          "details": [
            "Used for positioning MEP components within rack tiers"
          ],
          "parameters": [
            {
              "name": "p",
              "type": "Object",
              "description": "- Rack parameters with topClearance, beamSize, and tierHeights"
            },
            {
              "name": "idx",
              "type": "number",
              "description": "- 1-based tier index"
            }
          ],
          "returns": {
            "type": "number",
            "description": "Y-coordinate in meters of the bottom beam center"
          }
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "idx",
            "hasDefault": false,
            "defaultValue": null,
            "type": "string"
          }
        ],
        "lineNumber": 677,
        "signature": "function bottomBeamCenterY(p, idx)"
      }
    ],
    "buildPipesFlexible": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "function declaration",
        "description": {
          "summary": "Creates ipesflexible",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "tierIdx",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "pipes",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "pipeMat",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "snapPoints",
            "hasDefault": true,
            "defaultValue": "[]",
            "type": "array"
          }
        ],
        "lineNumber": 713,
        "signature": "function buildPipesFlexible(p, tierIdx, pipes, pipeMat, snapPoints = [])"
      }
    ],
    "DuctEditor": [
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "named export",
        "description": {
          "summary": "DuctEditor - Compact horizontal editor for duct dimensions",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "{ \r\n  selectedDuct",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "renderer",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onSave",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCancel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCopy",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "visible",
            "hasDefault": true,
            "defaultValue": "true",
            "type": "boolean"
          },
          {
            "name": "rackParams",
            "hasDefault": true,
            "defaultValue": "{}\r\n}",
            "type": "object"
          }
        ],
        "lineNumber": 22,
        "signature": "export const DuctEditor = ({ \r\n  selectedDuct, \r\n  camera, \r\n  renderer, \r\n  onSave, \r\n  onCancel,\r\n..."
      }
    ],
    "createMaterials": [
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "type": "function declaration",
        "description": {
          "summary": "Create all materials used in the 3D scene",
          "details": [],
          "parameters": [
            {
              "name": "textures",
              "type": "Object",
              "description": "- Object containing loaded textures"
            }
          ],
          "returns": {
            "type": "Object",
            "description": "Object containing all materials"
          }
        },
        "parameters": [
          {
            "name": "textures",
            "hasDefault": true,
            "defaultValue": "{}",
            "type": "object"
          }
        ],
        "lineNumber": 14,
        "signature": "function createMaterials(textures = {})"
      }
    ],
    "loadTextures": [
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "type": "function declaration",
        "description": {
          "summary": "Load textures for materials",
          "details": [],
          "parameters": [
            {
              "name": "publicUrl",
              "type": "string",
              "description": "- Base URL for texture files"
            }
          ],
          "returns": {
            "type": "Object",
            "description": "Object containing loaded textures"
          }
        },
        "parameters": [
          {
            "name": "publicUrl",
            "hasDefault": true,
            "defaultValue": "process.env.PUBLIC_URL",
            "type": "any"
          }
        ],
        "lineNumber": 95,
        "signature": "function loadTextures(publicUrl = process.env.PUBLIC_URL)"
      }
    ],
    "disposeMaterials": [
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "type": "function declaration",
        "description": {
          "summary": "Dispose of all materials to prevent memory leaks",
          "details": [],
          "parameters": [
            {
              "name": "materials",
              "type": "Object",
              "description": "- Materials object to dispose"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "materials",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 119,
        "signature": "function disposeMaterials(materials)"
      }
    ],
    "forEach": [
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: forEach",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "material",
            "hasDefault": true,
            "defaultValue": "> {\r\n    if (material && typeof material.dispose",
            "type": "any"
          }
        ],
        "lineNumber": 120,
        "signature": "forEach(material => {\r\n    if (material && typeof material.dispose === 'function') {"
      },
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "type": "arrow function",
        "description": {
          "summary": "remove previously generated meshes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "obj",
            "hasDefault": true,
            "defaultValue": "> {\r\n    if (obj.userData.isGenerated",
            "type": "any"
          }
        ],
        "lineNumber": 59,
        "signature": "forEach(obj => {\r\n    if (obj.userData.isGenerated) {"
      },
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: forEach",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "ductGroup",
            "hasDefault": true,
            "defaultValue": "> {\r\n      const ductData",
            "type": "any"
          }
        ],
        "lineNumber": 150,
        "signature": "forEach(ductGroup => {\r\n      const ductData = ductGroup.userData?.ductData\r\n      if (ductData) {"
      }
    ],
    "PipeEditor": [
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "named export",
        "description": {
          "summary": "PipeEditor - Compact horizontal editor for pipe dimensions",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "{ \r\n  selectedPipe",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "renderer",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onSave",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCancel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCopy",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "visible",
            "hasDefault": true,
            "defaultValue": "true",
            "type": "boolean"
          },
          {
            "name": "rackParams",
            "hasDefault": true,
            "defaultValue": "{}\r\n}",
            "type": "object"
          }
        ],
        "lineNumber": 20,
        "signature": "export const PipeEditor = ({ \r\n  selectedPipe, \r\n  camera, \r\n  renderer, \r\n  onSave, \r\n  onCancel,\r\n..."
      }
    ],
    "handleStringChange": [
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles stringchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 213,
        "signature": "const handleStringChange = (field, value) =>"
      }
    ],
    "ThreeScene": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "function declaration",
        "description": {
          "summary": "Main 3D scene component for the prefabrication assembly automation application",
          "details": [
            "Manages Three.js renderer, cameras, controls, and all 3D content including rack structures,",
            "MEP systems (ductwork, piping, conduits, cable trays), measurement tools, and interactions"
          ],
          "parameters": [
            {
              "name": "props",
              "type": "Object",
              "description": "- Component properties"
            },
            {
              "name": "props.isMeasurementActive",
              "type": "boolean",
              "description": "- Whether measurement tool is currently active"
            },
            {
              "name": "props.mepItems",
              "type": "Array",
              "description": "- Array of MEP (mechanical, electrical, plumbing) items to render"
            },
            {
              "name": "props.initialRackParams",
              "type": "Object",
              "description": "- Initial rack configuration parameters"
            },
            {
              "name": "props.initialBuildingParams",
              "type": "Object",
              "description": "- Initial building shell parameters"
            },
            {
              "name": "props.initialViewMode",
              "type": "string",
              "description": "- Initial view mode ('3D', '2D', etc.)"
            },
            {
              "name": "props.onSceneReady",
              "type": "Function",
              "description": "- Callback fired when scene is initialized and ready"
            }
          ],
          "returns": {
            "type": "JSX.Element",
            "description": "The rendered 3D scene canvas"
          }
        },
        "parameters": [
          {
            "name": "{ isMeasurementActive",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "mepItems",
            "hasDefault": true,
            "defaultValue": "[]",
            "type": "array"
          },
          {
            "name": "initialRackParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "initialBuildingParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "initialViewMode",
            "hasDefault": true,
            "defaultValue": "'3D'",
            "type": "string"
          },
          {
            "name": "onSceneReady }",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 42,
        "signature": "function ThreeScene({ isMeasurementActive, mepItems = [], initialRackParams, initialBuildingParams, ..."
      }
    ],
    "createBackgroundGrid": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "function declaration",
        "description": {
          "summary": "Creates backgroundgrid",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "size",
            "hasDefault": true,
            "defaultValue": "1000",
            "type": "number"
          },
          {
            "name": "step",
            "hasDefault": true,
            "defaultValue": "10",
            "type": "number"
          },
          {
            "name": "color",
            "hasDefault": true,
            "defaultValue": "0x000000",
            "type": "number"
          }
        ],
        "lineNumber": 126,
        "signature": "function createBackgroundGrid(size = 1000, step = 10, color = 0x000000)"
      }
    ],
    "updateOrthoCamera": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "function declaration",
        "description": {
          "summary": "Updates ateorthocamera",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "viewHeight",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 141,
        "signature": "function updateOrthoCamera(camera, viewHeight)"
      }
    ],
    "onControlsChange": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles rolschange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 172,
        "signature": "const onControlsChange = () =>"
      }
    ],
    "onKeyDown": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles own events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "evt",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 184,
        "signature": "const onKeyDown = (evt) =>"
      }
    ],
    "logCamera": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Camera Logger",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 205,
        "signature": "const logCamera = () =>"
      }
    ],
    "onLog": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles  events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "e",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 207,
        "signature": "const onLog = (e) =>"
      }
    ],
    "centerOrbitOnContent": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Center the orbit controls on the generated content",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 301,
        "signature": "const centerOrbitOnContent = () =>"
      }
    ],
    "saveCameraState": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Camera state persistence functions",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 340,
        "signature": "const saveCameraState = () =>"
      }
    ],
    "loadCameraState": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Function: loadCameraState",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 356,
        "signature": "const loadCameraState = () =>"
      }
    ],
    "handleDuctSelection": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Setup duct editor callbacks",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 708,
        "signature": "const handleDuctSelection = () =>"
      }
    ],
    "handlePipeSelection": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Setup pipe editor callbacks",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 715,
        "signature": "const handlePipeSelection = () =>"
      }
    ],
    "handleConduitSelection": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Setup conduit editor callbacks",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 722,
        "signature": "const handleConduitSelection = () =>"
      }
    ],
    "handleCableTraySelection": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Setup cable tray editor callbacks",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 729,
        "signature": "const handleCableTraySelection = () =>"
      }
    ],
    "handleDuctEditorSave": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles ducteditorsave events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newDimensions",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 759,
        "signature": "const handleDuctEditorSave = (newDimensions) =>"
      }
    ],
    "handleDuctEditorCancel": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles ducteditorcancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 794,
        "signature": "const handleDuctEditorCancel = () =>"
      }
    ],
    "handlePipeEditorSave": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Pipe editor handlers",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newDimensions",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 799,
        "signature": "const handlePipeEditorSave = (newDimensions) =>"
      }
    ],
    "handlePipeEditorCancel": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles pipeeditorcancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 870,
        "signature": "const handlePipeEditorCancel = () =>"
      }
    ],
    "handleConduitEditorSave": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles conduiteditorsave events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newDimensions",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 874,
        "signature": "const handleConduitEditorSave = (newDimensions) =>"
      }
    ],
    "handleConduitEditorCancel": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles conduiteditorcancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 937,
        "signature": "const handleConduitEditorCancel = () =>"
      }
    ],
    "handleCableTrayEditorSave": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Cable tray editor handlers",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newDimensions",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 942,
        "signature": "const handleCableTrayEditorSave = (newDimensions) =>"
      }
    ],
    "handleCableTrayEditorCancel": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles cabletrayeditorcancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 1011,
        "signature": "const handleCableTrayEditorCancel = () =>"
      }
    ],
    "onViewCubeClick": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "ViewCube click handler",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 1069,
        "signature": "const onViewCubeClick = (event) =>"
      }
    ],
    "onResize": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Resize & Animate",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 1090,
        "signature": "const onResize = () =>"
      }
    ],
    "handleTradeRackSelected": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Add event listeners for trade rack selection",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 1126,
        "signature": "const handleTradeRackSelected = (event) =>"
      }
    ],
    "handleTradeRackDeselected": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles traderackdeselected events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 1131,
        "signature": "const handleTradeRackDeselected = () =>"
      }
    ],
    "handleAxisToggle": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles axistoggle events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "axis",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          }
        ],
        "lineNumber": 1251,
        "signature": "const handleAxisToggle = (axis) =>"
      }
    ],
    "handleClearMeasurements": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Handles clearmeasurements events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 1268,
        "signature": "const handleClearMeasurements = () =>"
      },
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for clearing all measurements",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 30,
        "signature": "const handleClearMeasurements = () =>"
      }
    ],
    "map": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Find and update the matching item",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": true,
            "defaultValue": "> {\r\n              if (item.id",
            "type": "any"
          }
        ],
        "lineNumber": 772,
        "signature": "map(item => {\r\n              if (item.id === selectedDuctData.id) {"
      }
    ],
    "setAxisLock": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "arrow function",
        "description": {
          "summary": "Updates axislock",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "prev",
            "hasDefault": true,
            "defaultValue": "> {\r\n      const currentlyLocked",
            "type": "any"
          }
        ],
        "lineNumber": 1252,
        "signature": "setAxisLock(prev => {\r\n      const currentlyLocked = prev[axis]\r\n      if (currentlyLocked) {"
      }
    ],
    "ensureArrays": [
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "type": "function declaration",
        "description": {
          "summary": "Ensure arrays exist even if user omitted them",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 16,
        "signature": "function ensureArrays(p)"
      }
    ],
    "syncArrays": [
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "type": "function declaration",
        "description": {
          "summary": "Trim or pad arrays to match tierCount",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "p",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 27,
        "signature": "function syncArrays(p)"
      }
    ],
    "buildRackScene": [
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "type": "function declaration",
        "description": {
          "summary": "Rebuilds the rack, shell, ducts, and pipes in the scene based on params",
          "details": [],
          "parameters": [
            {
              "name": "scene",
              "type": "THREE.Scene",
              "description": ""
            },
            {
              "name": "params",
              "type": "Object",
              "description": ""
            },
            {
              "name": "mats",
              "type": "Object",
              "description": "{ postMaterial, longBeamMaterial, transBeamMaterial, wallMaterial, ceilingMaterial, floorMaterial, roofMaterial, ductMat }"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "scene",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "params",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "mats",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 54,
        "signature": "function buildRackScene(scene, params, mats)"
      }
    ],
    "initChatInterface": [
      {
        "file": "src\\components\\3d\\ui\\chatInterface.js",
        "type": "function declaration",
        "description": {
          "summary": "Initializes chatinterface",
          "details": [],
          "parameters": [
            {
              "name": "params",
              "type": "object",
              "description": "Your GUI params object"
            },
            {
              "name": "rebuildScene",
              "type": "function",
              "description": "The function returned by setupGUI()"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "params",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "rebuildScene",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "updateGUI",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 16,
        "signature": "function initChatInterface(params, rebuildScene, updateGUI)"
      }
    ],
    "append": [
      {
        "file": "src\\components\\3d\\ui\\chatInterface.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: append",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "author",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "text",
            "hasDefault": false,
            "defaultValue": null,
            "type": "string"
          }
        ],
        "lineNumber": 249,
        "signature": "function append(author, text)"
      }
    ],
    "calculateScreenPosition": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Update screen position of an editor UI element based on 3D object position",
          "details": [],
          "parameters": [
            {
              "name": "object3D",
              "type": "THREE.Object3D",
              "description": "- The 3D object to track"
            },
            {
              "name": "camera",
              "type": "THREE.Camera",
              "description": "- The camera"
            },
            {
              "name": "renderer",
              "type": "THREE.WebGLRenderer",
              "description": "- The renderer"
            },
            {
              "name": "yOffset",
              "type": "number",
              "description": "- Vertical offset in meters below the object"
            }
          ],
          "returns": {
            "type": "{x: number, y: number",
            "description": "| null} Screen position or null if invalid"
          }
        },
        "parameters": [
          {
            "name": "object3D",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "renderer",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "yOffset",
            "hasDefault": true,
            "defaultValue": "0.3",
            "type": "number"
          }
        ],
        "lineNumber": 23,
        "signature": "function calculateScreenPosition(object3D, camera, renderer, yOffset = 0.3)"
      }
    ],
    "validateDimensionInput": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Validate and sanitize dimension input values",
          "details": [],
          "parameters": [
            {
              "name": "field",
              "type": "string",
              "description": "- The field name being updated"
            },
            {
              "name": "value",
              "type": "any",
              "description": "- The input value"
            },
            {
              "name": "isInteger",
              "type": "boolean",
              "description": "- Whether to enforce integer values"
            }
          ],
          "returns": {
            "type": "number | null",
            "description": "Validated number or null if invalid"
          }
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "isInteger",
            "hasDefault": true,
            "defaultValue": "false",
            "type": "boolean"
          }
        ],
        "lineNumber": 78,
        "signature": "function validateDimensionInput(field, value, isInteger = false)"
      }
    ],
    "getTierOptionsFromGeometry": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Get tier options from rack geometry snap lines",
          "details": [],
          "parameters": [
            {
              "name": "snapLineManager",
              "type": "Object",
              "description": "- The snap line manager instance"
            }
          ],
          "returns": {
            "type": "number[]",
            "description": "Array of tier numbers"
          }
        },
        "parameters": [
          {
            "name": "snapLineManager",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 103,
        "signature": "function getTierOptionsFromGeometry(snapLineManager)"
      }
    ],
    "findTierSpace": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Find tier space information for a specific tier number",
          "details": [],
          "parameters": [
            {
              "name": "snapLineManager",
              "type": "Object",
              "description": "- The snap line manager instance"
            },
            {
              "name": "tierNumber",
              "type": "number",
              "description": "- The tier number to find"
            }
          ],
          "returns": {
            "type": "Object | null",
            "description": "Tier space info with {tierIndex, top, bottom, height, centerY} or null"
          }
        },
        "parameters": [
          {
            "name": "snapLineManager",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "tierNumber",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 168,
        "signature": "function findTierSpace(snapLineManager, tierNumber)"
      }
    ],
    "calculateTierYPosition": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Calculate Y position for MEP component based on tier and dimensions",
          "details": [],
          "parameters": [
            {
              "name": "tierSpace",
              "type": "Object",
              "description": "- Tier space info from findTierSpace"
            },
            {
              "name": "componentHeight",
              "type": "number",
              "description": "- Height of the component in meters"
            },
            {
              "name": "alignment",
              "type": "string",
              "description": "- 'bottom', 'center', or 'top'"
            }
          ],
          "returns": {
            "type": "number",
            "description": "Y position in meters"
          }
        },
        "parameters": [
          {
            "name": "tierSpace",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "componentHeight",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "alignment",
            "hasDefault": true,
            "defaultValue": "'bottom'",
            "type": "string"
          }
        ],
        "lineNumber": 225,
        "signature": "function calculateTierYPosition(tierSpace, componentHeight, alignment = 'bottom')"
      }
    ],
    "calculateTierPosition": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Calculate tier position for components (legacy compatibility)",
          "details": [],
          "parameters": [
            {
              "name": "snapLineManager",
              "type": "Object",
              "description": "- The snap line manager instance"
            },
            {
              "name": "tierNumber",
              "type": "number",
              "description": "- The tier number"
            }
          ],
          "returns": {
            "type": "{y: number",
            "description": "} Object with Y position"
          }
        },
        "parameters": [
          {
            "name": "snapLineManager",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "tierNumber",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 257,
        "signature": "function calculateTierPosition(snapLineManager, tierNumber)"
      }
    ],
    "disposeObject3D": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Dispose of Three.js geometry and materials properly",
          "details": [],
          "parameters": [
            {
              "name": "object",
              "type": "THREE.Object3D",
              "description": "- The object to dispose"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "object",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 305,
        "signature": "function disposeObject3D(object)"
      }
    ],
    "createButtonHoverHandlers": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Create standard button hover handlers",
          "details": [],
          "parameters": [],
          "returns": {
            "type": "Object",
            "description": "Object with onMouseOver and onMouseOut handlers"
          }
        },
        "parameters": [
          {
            "name": "normalStyle",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "hoverStyle",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 334,
        "signature": "function createButtonHoverHandlers(normalStyle, hoverStyle)"
      }
    ],
    "calculateRackLength": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Calculate rack length from parameters",
          "details": [],
          "parameters": [
            {
              "name": "params",
              "type": "Object",
              "description": "- Rack parameters"
            }
          ],
          "returns": {
            "type": "number",
            "description": "Rack length in feet"
          }
        },
        "parameters": [
          {
            "name": "params",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 380,
        "signature": "function calculateRackLength(params)"
      }
    ],
    "createAnimationLoop": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Create animation frame loop with cleanup",
          "details": [],
          "parameters": [
            {
              "name": "updateFunction",
              "type": "Function",
              "description": "- Function to call on each frame"
            },
            {
              "name": "mountedRef",
              "type": "Object",
              "description": "- React ref to check if component is still mounted"
            }
          ],
          "returns": {
            "type": "Function",
            "description": "Cleanup function to stop animation"
          }
        },
        "parameters": [
          {
            "name": "updateFunction",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "mountedRef",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 408,
        "signature": "function createAnimationLoop(updateFunction, mountedRef)"
      }
    ],
    "return": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: return",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 420,
        "signature": "function\r\n  return ()"
      },
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: return",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 231,
        "signature": "function\r\n    return ()"
      }
    ],
    "createEditorKeyHandler": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Standard editor keyboard handlers",
          "details": [],
          "parameters": [
            {
              "name": "onSave",
              "type": "Function",
              "description": "- Save callback"
            },
            {
              "name": "onCancel",
              "type": "Function",
              "description": "- Cancel callback"
            }
          ],
          "returns": {
            "type": "Function",
            "description": "Keyboard event handler"
          }
        },
        "parameters": [
          {
            "name": "onSave",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "onCancel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 435,
        "signature": "function createEditorKeyHandler(onSave, onCancel)"
      }
    ],
    "setupTransformControls": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Setup standard transform controls for MEP components",
          "details": [],
          "parameters": [
            {
              "name": "camera",
              "type": "THREE.Camera",
              "description": "- The camera"
            },
            {
              "name": "domElement",
              "type": "HTMLElement",
              "description": "- The renderer DOM element"
            },
            {
              "name": "scene",
              "type": "THREE.Scene",
              "description": "- The scene to add gizmo to"
            },
            {
              "name": "orbitControls",
              "type": "Object",
              "description": "- Orbit controls to disable during dragging"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "- Configuration options"
            }
          ],
          "returns": {
            "type": "TransformControls",
            "description": "Configured transform controls"
          }
        },
        "parameters": [
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "domElement",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "scene",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "orbitControls",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "options",
            "hasDefault": true,
            "defaultValue": "{}",
            "type": "object"
          }
        ],
        "lineNumber": 455,
        "signature": "function setupTransformControls(camera, domElement, scene, orbitControls, options = {})"
      }
    ],
    "registerWithMepManager": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Register component with MEP selection manager",
          "details": [],
          "parameters": [
            {
              "name": "handlerName",
              "type": "string",
              "description": "- Name for the handler (e.g., 'ductwork', 'piping')"
            },
            {
              "name": "handlerInstance",
              "type": "Object",
              "description": "- The handler instance to register"
            },
            {
              "name": "fallbackSetup",
              "type": "Function",
              "description": "- Optional fallback setup function"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "handlerName",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "handlerInstance",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "fallbackSetup",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 500,
        "signature": "function registerWithMepManager(handlerName, handlerInstance, fallbackSetup)"
      }
    ],
    "setupRaycaster": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Setup standard raycaster for MEP interactions",
          "details": [],
          "parameters": [
            {
              "name": "camera",
              "type": "THREE.Camera",
              "description": "- The camera"
            }
          ],
          "returns": {
            "type": "THREE.Raycaster",
            "description": "Configured raycaster"
          }
        },
        "parameters": [
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 527,
        "signature": "function setupRaycaster(camera)"
      }
    ],
    "updateMouseCoordinates": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Update mouse coordinates for raycasting",
          "details": [],
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "- Mouse event"
            },
            {
              "name": "domElement",
              "type": "HTMLElement",
              "description": "- Renderer DOM element"
            },
            {
              "name": "mouseVector",
              "type": "THREE.Vector2",
              "description": "- Mouse vector to update"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "domElement",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "mouseVector",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 541,
        "signature": "function updateMouseCoordinates(event, domElement, mouseVector)"
      }
    ],
    "createMepKeyboardHandler": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "function declaration",
        "description": {
          "summary": "Standard keyboard shortcut handler for MEP interactions",
          "details": [],
          "parameters": [
            {
              "name": "selectedItemName",
              "type": "string",
              "description": "- Name of the selected item for logging"
            },
            {
              "name": "handlers",
              "type": "Object",
              "description": "- Object with keyboard handler functions"
            }
          ],
          "returns": {
            "type": "Function",
            "description": "Keyboard event handler"
          }
        },
        "parameters": [
          {
            "name": "selectedItemName",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "handlers",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 553,
        "signature": "function createMepKeyboardHandler(selectedItemName, handlers)"
      }
    ],
    "tryRegister": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: tryRegister",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 501,
        "signature": "const tryRegister = () =>"
      }
    ],
    "switch": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "method",
        "description": {
          "summary": "Function: switch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "alignment",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 233,
        "signature": "switch (alignment) {"
      },
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "method",
        "description": {
          "summary": "Function: switch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 86,
        "signature": "switch (type) {"
      },
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "method",
        "description": {
          "summary": "Function: switch",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 92,
        "signature": "switch (type) {"
      }
    ],
    "createMepEventHandler": [
      {
        "file": "src\\components\\3d\\utils\\mepEventHandler.js",
        "type": "function declaration",
        "description": {
          "summary": "Factory function to create MEP-specific event handlers",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "componentType",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "scene",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "camera",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "renderer",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "orbitControls",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "options",
            "hasDefault": true,
            "defaultValue": "{}",
            "type": "object"
          }
        ],
        "lineNumber": 449,
        "signature": "function createMepEventHandler(componentType, scene, camera, renderer, orbitControls, options = {})"
      }
    ],
    "AppManualBuilding": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppManualBuilding",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 12,
        "signature": "const AppManualBuilding = (props) =>"
      }
    ],
    "validateForm": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "arrow function",
        "description": {
          "summary": "Validates form",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 59,
        "signature": "const validateForm = () =>"
      },
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Validates form",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 59,
        "signature": "const validateForm = () =>"
      }
    ],
    "handleFeetInchesChange": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for feet+inches input changes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 89,
        "signature": "const handleFeetInchesChange = (field, type, value) =>"
      },
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for feet+inches input changes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 29,
        "signature": "const handleFeetInchesChange = (field, type, value) =>"
      },
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for feet+inches input changes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 31,
        "signature": "const handleFeetInchesChange = (field, type, value) =>"
      },
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for feet+inches input changes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 28,
        "signature": "const handleFeetInchesChange = (field, type, value) =>"
      },
      {
        "file": "src\\components\\mep\\app-piping.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for feet+inches input changes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 28,
        "signature": "const handleFeetInchesChange = (field, type, value) =>"
      },
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for feet+inches input changes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 77,
        "signature": "const handleFeetInchesChange = (field, type, value) =>"
      }
    ],
    "getUnitLabel": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "arrow function",
        "description": {
          "summary": "Retrieves unitlabel",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 106,
        "signature": "const getUnitLabel = (type) =>"
      }
    ],
    "AppManualRack": [
      {
        "file": "src\\components\\forms\\app-manual-rack.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppManualRack",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppManualRack = (props) =>"
      }
    ],
    "SignIn": [
      {
        "file": "src\\components\\forms\\sign-in.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: SignIn",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 14,
        "signature": "const SignIn = (props) =>"
      }
    ],
    "SignUp": [
      {
        "file": "src\\components\\forms\\sign-up.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: SignUp",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 14,
        "signature": "const SignUp = (props) =>"
      }
    ],
    "AppBottomOptions": [
      {
        "file": "src\\components\\layout\\app-bottom-options.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppBottomOptions",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppBottomOptions = (props) =>"
      }
    ],
    "handleViewModeChange": [
      {
        "file": "src\\components\\layout\\app-bottom-options.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles viewmodechange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "mode",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 17,
        "signature": "const handleViewModeChange = (mode) =>"
      },
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for view mode change (2D/3D)",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "mode",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 39,
        "signature": "const handleViewModeChange = (mode) =>"
      }
    ],
    "AppTopMainMenu": [
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppTopMainMenu",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppTopMainMenu = (props) =>"
      }
    ],
    "handleEditStart": [
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles editstart events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 31,
        "signature": "const handleEditStart = () =>"
      }
    ],
    "handleEditSave": [
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles editsave events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 36,
        "signature": "const handleEditSave = () =>"
      }
    ],
    "handleEditCancel": [
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles editcancel events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 44,
        "signature": "const handleEditCancel = () =>"
      }
    ],
    "Footer": [
      {
        "file": "src\\components\\layout\\footer.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: Footer",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const Footer = (props) =>"
      }
    ],
    "AppAddMEP": [
      {
        "file": "src\\components\\mep\\app-add-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppAddMEP",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppAddMEP = (props) =>"
      }
    ],
    "AppCableTrays": [
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppCableTrays",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppCableTrays = (props) =>"
      }
    ],
    "convertToInches": [
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "arrow function",
        "description": {
          "summary": "Helper to convert feet+inches to total inches",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 24,
        "signature": "const convertToInches = (feetInches) =>"
      },
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "arrow function",
        "description": {
          "summary": "Helper to convert feet+inches to total inches",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 26,
        "signature": "const convertToInches = (feetInches) =>"
      },
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "type": "arrow function",
        "description": {
          "summary": "Helper to convert feet+inches to total inches",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 23,
        "signature": "const convertToInches = (feetInches) =>"
      },
      {
        "file": "src\\components\\mep\\app-piping.js",
        "type": "arrow function",
        "description": {
          "summary": "Helper to convert feet+inches to total inches",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "feetInches",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 23,
        "signature": "const convertToInches = (feetInches) =>"
      }
    ],
    "handleAddCableTray": [
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles addcabletray events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 40,
        "signature": "const handleAddCableTray = () =>"
      }
    ],
    "getCableTrayColor": [
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "arrow function",
        "description": {
          "summary": "Get default color based on cable tray type",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 85,
        "signature": "const getCableTrayColor = (type) =>"
      }
    ],
    "AppConduits": [
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppConduits",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppConduits = (props) =>"
      }
    ],
    "handleAddConduit": [
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles addconduit events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 42,
        "signature": "const handleAddConduit = () =>"
      }
    ],
    "getConduitColor": [
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "arrow function",
        "description": {
          "summary": "Get default color based on conduit type",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 91,
        "signature": "const getConduitColor = (type) =>"
      }
    ],
    "incrementCount": [
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: incrementCount",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 101,
        "signature": "const incrementCount = () =>"
      }
    ],
    "decrementCount": [
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: decrementCount",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 102,
        "signature": "const decrementCount = () =>"
      }
    ],
    "AppDuctwork": [
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppDuctwork",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppDuctwork = (props) =>"
      }
    ],
    "handleAddDuct": [
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles addduct events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 39,
        "signature": "const handleAddDuct = () =>"
      }
    ],
    "AppPiping": [
      {
        "file": "src\\components\\mep\\app-piping.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppPiping",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppPiping = (props) =>"
      }
    ],
    "handleAddPipe": [
      {
        "file": "src\\components\\mep\\app-piping.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles addpipe events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 39,
        "signature": "const handleAddPipe = () =>"
      }
    ],
    "AppRackProperties": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppRackProperties",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 12,
        "signature": "const AppRackProperties = (props) =>"
      }
    ],
    "handleMountTypeChange": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles mounttypechange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 88,
        "signature": "const handleMountTypeChange = (type) =>"
      }
    ],
    "handleTierCountChange": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles tiercountchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 93,
        "signature": "const handleTierCountChange = (event) =>"
      }
    ],
    "handleTierHeightChange": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles tierheightchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "tierIndex",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "type",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 111,
        "signature": "const handleTierHeightChange = (tierIndex, type, value) =>"
      }
    ],
    "handleSelectChange": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles selectchange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "field",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "value",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 126,
        "signature": "const handleSelectChange = (field, value) =>"
      }
    ],
    "handleAddRack": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles addrack events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 130,
        "signature": "const handleAddRack = () =>"
      },
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for adding rack to scene",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "params",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "setIsRackPropertiesVisible",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          }
        ],
        "lineNumber": 78,
        "signature": "const handleAddRack = (params, setIsRackPropertiesVisible) =>"
      },
      {
        "file": "src\\pages\\app-page.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for adding rack (wrapper to pass setIsRackPropertiesVisible)",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "params",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 132,
        "signature": "const handleAddRack = (params) =>"
      }
    ],
    "renderTierHeightInputs": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Generate tier height inputs based on tier count",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 142,
        "signature": "const renderTierHeightInputs = () =>"
      }
    ],
    "setFormData": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "arrow function",
        "description": {
          "summary": "Updates formdata",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "prev",
            "hasDefault": true,
            "defaultValue": "> {\r\n      // Update tier heights array to match new count\r\n      const newTierHeights",
            "type": "any"
          }
        ],
        "lineNumber": 95,
        "signature": "setFormData(prev => {\r\n      // Update tier heights array to match new count\r\n      const newTierHei..."
      }
    ],
    "AppSavedConfigurations": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppSavedConfigurations",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppSavedConfigurations = (props) =>"
      }
    ],
    "handleConfigClick": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles configclick events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "config",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 46,
        "signature": "const handleConfigClick = (config) =>"
      }
    ],
    "handleSaveConfiguration": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles saveconfiguration events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 53,
        "signature": "const handleSaveConfiguration = () =>"
      }
    ],
    "handleUpdateConfig": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles updateconfig events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 124,
        "signature": "const handleUpdateConfig = (configId, event) =>"
      }
    ],
    "handleStartRename": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles startrename events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "config",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 225,
        "signature": "const handleStartRename = (config, event) =>"
      }
    ],
    "handleCancelRename": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles cancelrename events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 231,
        "signature": "const handleCancelRename = () =>"
      }
    ],
    "handleSaveRename": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles saverename events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 236,
        "signature": "const handleSaveRename = (configId) =>"
      }
    ],
    "handleDeleteConfig": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles deleteconfig events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 282,
        "signature": "const handleDeleteConfig = (configId, event) =>"
      }
    ],
    "formatDimension": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Formats dimension",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "dimension",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 298,
        "signature": "const formatDimension = (dimension) =>"
      }
    ],
    "formatDate": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Formats date",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "dateString",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 304,
        "signature": "const formatDate = (dateString) =>"
      }
    ],
    "getConfigColor": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "arrow function",
        "description": {
          "summary": "Generate a color for each configuration based on its index",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "index",
            "hasDefault": false,
            "defaultValue": null,
            "type": "number"
          }
        ],
        "lineNumber": 310,
        "signature": "const getConfigColor = (index) =>"
      }
    ],
    "getItemDisplayText": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "function declaration",
        "description": {
          "summary": "Display text per item with detailed information (no tier info since it's shown in sections)",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 80,
        "signature": "function getItemDisplayText(item)"
      }
    ],
    "AppTierMEP": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppTierMEP",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 11,
        "signature": "const AppTierMEP = (props) =>"
      }
    ],
    "handleClickOutside": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles clickoutside events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 39,
        "signature": "const handleClickOutside = (event) =>"
      },
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles clickoutside events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 110,
        "signature": "const handleClickOutside = (event) =>"
      }
    ],
    "positionColorPicker": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Position color picker dropdown dynamically",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "buttonElement",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "dropdownElement",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 55,
        "signature": "const positionColorPicker = (buttonElement, dropdownElement) =>"
      }
    ],
    "getAvailableTiers": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Get the number of tiers available from rack parameters or geometry",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 121,
        "signature": "const getAvailableTiers = () =>"
      }
    ],
    "groupItemsByTier": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Group items by tier",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 161,
        "signature": "const groupItemsByTier = () =>"
      }
    ],
    "toggleSection": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Toggle section collapse",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "sectionName",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 207,
        "signature": "const toggleSection = (sectionName) =>"
      }
    ],
    "handleDeleteAll": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "arrow function",
        "description": {
          "summary": "Handle delete all MEP items",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 215,
        "signature": "const handleDeleteAll = () =>"
      }
    ],
    "AppButtonLeftMenu": [
      {
        "file": "src\\components\\navigation\\app-button-left-menu.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppButtonLeftMenu",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppButtonLeftMenu = (props) =>"
      }
    ],
    "Navbar": [
      {
        "file": "src\\components\\navigation\\navbar.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: Navbar",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 15,
        "signature": "const Navbar = (props) =>"
      }
    ],
    "ProjectDashboardNavbar": [
      {
        "file": "src\\components\\navigation\\project-dashboard-navbar.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: ProjectDashboardNavbar",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 15,
        "signature": "const ProjectDashboardNavbar = (props) =>"
      }
    ],
    "ProjectDashboardSidebar": [
      {
        "file": "src\\components\\navigation\\project-dashboard-sidebar.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: ProjectDashboardSidebar",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const ProjectDashboardSidebar = (props) =>"
      }
    ],
    "ProjectsNavbar": [
      {
        "file": "src\\components\\navigation\\projects-navbar.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: ProjectsNavbar",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 15,
        "signature": "const ProjectsNavbar = (props) =>"
      }
    ],
    "ProjectsSidebar": [
      {
        "file": "src\\components\\navigation\\projects-sidebar.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: ProjectsSidebar",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const ProjectsSidebar = (props) =>"
      }
    ],
    "MultiTradeRacks": [
      {
        "file": "src\\components\\projects\\multi-trade-racks.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: MultiTradeRacks",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 14,
        "signature": "const MultiTradeRacks = (props) =>"
      }
    ],
    "ProjectsMain": [
      {
        "file": "src\\components\\projects\\projects-main.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: ProjectsMain",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 14,
        "signature": "const ProjectsMain = (props) =>"
      }
    ],
    "AppAIChatPanel": [
      {
        "file": "src\\components\\ui\\app-ai-chat-panel.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppAIChatPanel",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppAIChatPanel = (props) =>"
      }
    ],
    "AppLogo": [
      {
        "file": "src\\components\\ui\\app-logo.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppLogo",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AppLogo = (props) =>"
      }
    ],
    "AssemblyCard": [
      {
        "file": "src\\components\\ui\\assembly-card.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AssemblyCard",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const AssemblyCard = (props) =>"
      }
    ],
    "Hero": [
      {
        "file": "src\\components\\ui\\hero.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: Hero",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 14,
        "signature": "const Hero = (props) =>"
      }
    ],
    "LogoProjects": [
      {
        "file": "src\\components\\ui\\logo-projects.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: LogoProjects",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const LogoProjects = (props) =>"
      }
    ],
    "Logo": [
      {
        "file": "src\\components\\ui\\logo.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: Logo",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 14,
        "signature": "const Logo = (props) =>"
      }
    ],
    "ProjectCard": [
      {
        "file": "src\\components\\ui\\project-card.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: ProjectCard",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const ProjectCard = (props) =>"
      }
    ],
    "createConfigurationHandlers": [
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "named export",
        "description": {
          "summary": "Creates configuration handlers for the application",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "buildingParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setBuildingParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "rackParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setRackParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setSavedConfigsRefresh",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "buildingShell",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "tradeRack",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 16,
        "signature": "export const createConfigurationHandlers = (\r\n  buildingParams,\r\n  setBuildingParams,\r\n  rackParams,..."
      }
    ],
    "handleBuildingSave": [
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for building shell save",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "params",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 27,
        "signature": "const handleBuildingSave = (params) =>"
      }
    ],
    "handleConfigurationSaved": [
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for when configuration is saved",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "config",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 120,
        "signature": "const handleConfigurationSaved = (config) =>"
      }
    ],
    "handleRestoreConfiguration": [
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for restoring saved rack configuration",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "config",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 132,
        "signature": "const handleRestoreConfiguration = (config) =>"
      }
    ],
    "selectDuct": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Helper functions for selecting MEP items in 3D scene",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 134,
        "signature": "function selectDuct(item)"
      }
    ],
    "selectPipe": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: selectPipe",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 169,
        "signature": "function selectPipe(item)"
      }
    ],
    "selectConduit": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: selectConduit",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 204,
        "signature": "function selectConduit(item)"
      }
    ],
    "selectCableTray": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Function: selectCableTray",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 239,
        "signature": "function selectCableTray(item)"
      }
    ],
    "updateDuctColor": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Helper functions for updating MEP item colors in 3D scene",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "newColor",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 278,
        "signature": "function updateDuctColor(itemId, newColor)"
      }
    ],
    "updatePipeColor": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Updates atepipecolor",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "newColor",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 298,
        "signature": "function updatePipeColor(itemId, newColor)"
      }
    ],
    "updateConduitColor": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Updates ateconduitcolor",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "newColor",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 318,
        "signature": "function updateConduitColor(itemId, newColor)"
      }
    ],
    "updateCableTrayColor": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "function declaration",
        "description": {
          "summary": "Updates atecabletraycolor",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "newColor",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 341,
        "signature": "function updateCableTrayColor(itemId, newColor)"
      }
    ],
    "createMEPHandlers": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "named export",
        "description": {
          "summary": "Creates comprehensive MEP (Mechanical, Electrical, Plumbing) handlers for the application",
          "details": [
            "Provides functions for adding, removing, updating, and managing MEP items in the 3D scene",
            "Handles state updates and persistence to project manifest"
          ],
          "parameters": [
            {
              "name": "mepItems",
              "type": "Array",
              "description": "- Current array of MEP items in state"
            },
            {
              "name": "setMepItems",
              "type": "Function",
              "description": "- State setter function for MEP items"
            }
          ],
          "returns": {
            "type": "Object",
            "description": "Object containing all MEP handler functions"
          }
        },
        "parameters": [
          {
            "name": "mepItems",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setMepItems",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 21,
        "signature": "export const createMEPHandlers = (mepItems, setMepItems) =>"
      }
    ],
    "handleAddMepItem": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Adds a new MEP item to the system",
          "details": [
            "Generates unique ID and updates both state and project manifest"
          ],
          "parameters": [
            {
              "name": "item",
              "type": "Object",
              "description": "- MEP item to add (duct, pipe, conduit, cable tray)"
            }
          ],
          "returns": {
            "type": "Object",
            "description": "The added item with generated ID"
          }
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 29,
        "signature": "const handleAddMepItem = (item) =>"
      }
    ],
    "handleRemoveMepItem": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Removes a specific MEP item from the system",
          "details": [
            "Updates both state and project manifest"
          ],
          "parameters": [
            {
              "name": "itemId",
              "type": "number|string",
              "description": "- Unique identifier of the item to remove"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 44,
        "signature": "const handleRemoveMepItem = (itemId) =>"
      }
    ],
    "handleDeleteAllMepItems": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Removes all MEP items from the system",
          "details": [
            "Clears state, localStorage, and project manifest"
          ],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 58,
        "signature": "const handleDeleteAllMepItems = () =>"
      }
    ],
    "handleMepItemClick": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for clicking MEP items in the panel",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 75,
        "signature": "const handleMepItemClick = (item) =>"
      }
    ],
    "handleDuctColorChange": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for changing MEP item color",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "newColor",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 88,
        "signature": "const handleDuctColorChange = (itemId, newColor) =>"
      }
    ],
    "createUIHandlers": [
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "named export",
        "description": {
          "summary": "Creates UI handlers for the application",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "isMeasurementActive",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "setIsMeasurementActive",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "viewMode",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setViewMode",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "isAddMEPVisible",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "setIsAddMEPVisible",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "activePanel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setActivePanel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 12,
        "signature": "export const createUIHandlers = (\r\n  isMeasurementActive,\r\n  setIsMeasurementActive,\r\n  viewMode,\r\n ..."
      }
    ],
    "handleMeasurementToggle": [
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for measurement tool toggle",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 24,
        "signature": "const handleMeasurementToggle = () =>"
      }
    ],
    "handleFitView": [
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for fit view",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 47,
        "signature": "const handleFitView = () =>"
      }
    ],
    "handleToggleAddMEP": [
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for toggling AppAddMEP visibility",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 54,
        "signature": "const handleToggleAddMEP = () =>"
      }
    ],
    "createMEPPanelHandler": [
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "arrow function",
        "description": {
          "summary": "Handler for MEP panel button clicks (from AppAddMEP)",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "panelType",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 59,
        "signature": "const createMEPPanelHandler = (panelType) =>"
      }
    ],
    "useAppState": [
      {
        "file": "src\\hooks\\useAppState.js",
        "type": "named export",
        "description": {
          "summary": "Custom hook for managing application state",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 20,
        "signature": "export const useAppState = () =>"
      }
    ],
    "getInitialUIState": [
      {
        "file": "src\\hooks\\useAppState.js",
        "type": "arrow function",
        "description": {
          "summary": "Helper function to restore UI state from manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 22,
        "signature": "const getInitialUIState = () =>"
      }
    ],
    "handleProjectNameChange": [
      {
        "file": "src\\hooks\\useAppState.js",
        "type": "arrow function",
        "description": {
          "summary": "Updates the project name in state and localStorage",
          "details": [],
          "parameters": [
            {
              "name": "newName",
              "type": "string",
              "description": "- The new project name"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "newName",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 137,
        "signature": "const handleProjectNameChange = (newName) =>"
      }
    ],
    "handlePanelClick": [
      {
        "file": "src\\hooks\\useAppState.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles panel selection and updates UI state accordingly",
          "details": [
            "Manages active panel state and rack properties visibility"
          ],
          "parameters": [
            {
              "name": "panelName",
              "type": "string",
              "description": "- Name of the panel to toggle (e.g., 'tradeRack', 'mep')"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "panelName",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 147,
        "signature": "const handlePanelClick = (panelName) =>"
      }
    ],
    "useBuildingRackSync": [
      {
        "file": "src\\hooks\\useBuildingRackSync.js",
        "type": "named export",
        "description": {
          "summary": "Custom hook for syncing building and rack parameters",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "buildingParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "rackParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "isConfigLoaded",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "buildingShell",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "tradeRack",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 12,
        "signature": "export const useBuildingRackSync = (\r\n  buildingParams,\r\n  rackParams,\r\n  isConfigLoaded,\r\n  buildin..."
      }
    ],
    "useEventListeners": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "named export",
        "description": {
          "summary": "Custom hook for managing event listeners",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "isMeasurementActive",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "setIsMeasurementActive",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setMepItems",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "isAddMEPVisible",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "setIsAddMEPVisible",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "activePanel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "setActivePanel",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "isRackPropertiesVisible",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          },
          {
            "name": "setIsRackPropertiesVisible",
            "hasDefault": false,
            "defaultValue": null,
            "type": "boolean"
          }
        ],
        "lineNumber": 16,
        "signature": "export const useEventListeners = (\r\n  isMeasurementActive,\r\n  setIsMeasurementActive,\r\n  setMepItems..."
      }
    ],
    "handleMeasurementToolDeactivated": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles measurementtooldeactivated events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 30,
        "signature": "const handleMeasurementToolDeactivated = () =>"
      }
    ],
    "handleMepItemsUpdated": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles mepitemsupdated events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 43,
        "signature": "const handleMepItemsUpdated = (event) =>"
      }
    ],
    "handleStorageChange": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles storagechange events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 49,
        "signature": "const handleStorageChange = (event) =>"
      }
    ],
    "handleGlobalKeyDown": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles globalkeydown events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 71,
        "signature": "const handleGlobalKeyDown = (event) =>"
      }
    ],
    "handleClickOutsidePanels": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles clickoutsidepanels events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 135,
        "signature": "const handleClickOutsidePanels = (event) =>"
      }
    ],
    "handleClickOutsideRackProperties": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "arrow function",
        "description": {
          "summary": "Handles clickoutsiderackproperties events",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "event",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 178,
        "signature": "const handleClickOutsideRackProperties = (event) =>"
      }
    ],
    "useInitialization": [
      {
        "file": "src\\hooks\\useInitialization.js",
        "type": "named export",
        "description": {
          "summary": "Custom hook for initialization logic",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "rackParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "buildingParams",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "buildingShell",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "tradeRack",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "mepItems",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 18,
        "signature": "export const useInitialization = (\r\n  rackParams,\r\n  buildingParams,\r\n  buildingShell,\r\n  tradeRack,..."
      }
    ],
    "useSceneRack": [
      {
        "file": "src\\hooks\\useSceneRack.js",
        "type": "function declaration",
        "description": {
          "summary": "Custom hook for scenerack",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 10,
        "signature": "function useSceneRack()"
      }
    ],
    "useSceneShell": [
      {
        "file": "src\\hooks\\useSceneShell.js",
        "type": "function declaration",
        "description": {
          "summary": "Custom hook for sceneshell",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 10,
        "signature": "function useSceneShell()"
      }
    ],
    "App": [
      {
        "file": "src\\index.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: App",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 27,
        "signature": "const App = () =>"
      }
    ],
    "AppPage": [
      {
        "file": "src\\pages\\app-page.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: AppPage",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 46,
        "signature": "const AppPage = (props) =>"
      }
    ],
    "Home": [
      {
        "file": "src\\pages\\home.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: Home",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 17,
        "signature": "const Home = (props) =>"
      }
    ],
    "Login": [
      {
        "file": "src\\pages\\login.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: Login",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 16,
        "signature": "const Login = (props) =>"
      }
    ],
    "NotFound": [
      {
        "file": "src\\pages\\not-found.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: NotFound",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 13,
        "signature": "const NotFound = (props) =>"
      }
    ],
    "ProjectDashboard": [
      {
        "file": "src\\pages\\project-dashboard.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: ProjectDashboard",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 16,
        "signature": "const ProjectDashboard = (props) =>"
      }
    ],
    "Projects": [
      {
        "file": "src\\pages\\projects.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: Projects",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 16,
        "signature": "const Projects = (props) =>"
      }
    ],
    "SignupPage": [
      {
        "file": "src\\pages\\signup-page.js",
        "type": "arrow function",
        "description": {
          "summary": "Function: SignupPage",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "props",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 16,
        "signature": "const SignupPage = (props) =>"
      }
    ],
    "calculateTotalHeight": [
      {
        "file": "src\\types\\tradeRack.js",
        "type": "named export",
        "description": {
          "summary": "Calculate total rack height from tier configuration and beam sizes",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "config",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 47,
        "signature": "export const calculateTotalHeight = (config) =>"
      }
    ],
    "calculateBayConfiguration": [
      {
        "file": "src\\types\\tradeRack.js",
        "type": "named export",
        "description": {
          "summary": "Calculate number of bays and last bay width from total length and standard bay width",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "totalLength",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "standardBayWidth",
            "hasDefault": false,
            "defaultValue": null,
            "type": "string"
          }
        ],
        "lineNumber": 93,
        "signature": "export const calculateBayConfiguration = (totalLength, standardBayWidth) =>"
      }
    ],
    "exportConfigurationsToFile": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named export",
        "description": {
          "summary": "Export configurations to a JSON file",
          "details": [],
          "parameters": [
            {
              "name": "configurations",
              "type": "Array",
              "description": "- Array of configuration objects"
            },
            {
              "name": "filename",
              "type": "string",
              "description": "- Name of the file to save"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configurations",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "filename",
            "hasDefault": true,
            "defaultValue": "'trade-rack-configurations.json'",
            "type": "string"
          }
        ],
        "lineNumber": 17,
        "signature": "export const exportConfigurationsToFile = (configurations, filename = 'trade-rack-configurations.jso..."
      }
    ],
    "importConfigurationsFromFile": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named export",
        "description": {
          "summary": "Import configurations from a JSON file",
          "details": [],
          "parameters": [
            {
              "name": "file",
              "type": "File",
              "description": "- The file object to import"
            }
          ],
          "returns": {
            "type": "Promise",
            "description": "- Promise that resolves with the imported configurations"
          }
        },
        "parameters": [
          {
            "name": "file",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 61,
        "signature": "export const importConfigurationsFromFile = (file) =>"
      }
    ],
    "saveConfigurationsToLocalStorage": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named export",
        "description": {
          "summary": "Save configurations to browser's local storage as backup",
          "details": [],
          "parameters": [
            {
              "name": "configurations",
              "type": "Array",
              "description": "- Array of configuration objects"
            }
          ],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configurations",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 142,
        "signature": "export const saveConfigurationsToLocalStorage = (configurations) =>"
      }
    ],
    "loadConfigurationsFromLocalStorage": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named export",
        "description": {
          "summary": "Load configurations from browser's local storage",
          "details": [],
          "parameters": [],
          "returns": {
            "type": "Array",
            "description": "- Array of configuration objects"
          }
        },
        "parameters": [],
        "lineNumber": 162,
        "signature": "export const loadConfigurationsFromLocalStorage = () =>"
      }
    ],
    "generateExportFilename": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named export",
        "description": {
          "summary": "Generate a filename with timestamp for exports",
          "details": [],
          "parameters": [
            {
              "name": "prefix",
              "type": "string",
              "description": "- Prefix for the filename"
            }
          ],
          "returns": {
            "type": "string",
            "description": "- Generated filename"
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "hasDefault": true,
            "defaultValue": "'trade-rack-configurations'",
            "type": "string"
          }
        ],
        "lineNumber": 181,
        "signature": "export const generateExportFilename = (prefix = 'trade-rack-configurations') =>"
      }
    ],
    "logManifestToConsole": [
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "named export",
        "description": {
          "summary": "Export current manifest to browser console",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 17,
        "signature": "export const logManifestToConsole = () =>"
      }
    ],
    "downloadManifest": [
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "named export",
        "description": {
          "summary": "Download manifest as JSON file for backup/migration",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 73,
        "signature": "export const downloadManifest = () =>"
      }
    ],
    "getManifestInfo": [
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "named export",
        "description": {
          "summary": "Get manifest size and storage information",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 111,
        "signature": "export const getManifestInfo = () =>"
      }
    ],
    "createInitialManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Create the initial project manifest structure",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 19,
        "signature": "export const createInitialManifest = () =>"
      }
    ],
    "getProjectManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Retrieves the current project manifest from localStorage",
          "details": [
            "Creates initial manifest if none exists or if there are errors loading",
            "Validates and migrates manifest structure when necessary"
          ],
          "parameters": [],
          "returns": {
            "type": "Object",
            "description": "Current project manifest object"
          }
        },
        "parameters": [],
        "lineNumber": 93,
        "signature": "export const getProjectManifest = () =>"
      }
    ],
    "saveProjectManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Saves the project manifest to localStorage with automatic timestamp updates",
          "details": [
            "Updates the lastUpdated field and persists the manifest data"
          ],
          "parameters": [
            {
              "name": "manifest",
              "type": "Object",
              "description": "- Complete project manifest object to save"
            }
          ],
          "returns": {
            "type": "boolean",
            "description": "True if save was successful, false otherwise"
          }
        },
        "parameters": [
          {
            "name": "manifest",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 119,
        "signature": "export const saveProjectManifest = (manifest) =>"
      }
    ],
    "updateBuildingShell": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Update building shell parameters in manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "parameters",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 139,
        "signature": "export const updateBuildingShell = (parameters) =>"
      }
    ],
    "updateTradeRackConfiguration": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Update trade rack configuration in manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configuration",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          },
          {
            "name": "isNewSave",
            "hasDefault": true,
            "defaultValue": "false",
            "type": "boolean"
          }
        ],
        "lineNumber": 161,
        "signature": "export const updateTradeRackConfiguration = (configuration, isNewSave = false) =>"
      }
    ],
    "deleteTradeRackConfiguration": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Delete trade rack configuration from manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configurationId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 204,
        "signature": "export const deleteTradeRackConfiguration = (configurationId) =>"
      }
    ],
    "setActiveConfiguration": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Set the active configuration ID",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "configurationId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "object"
          }
        ],
        "lineNumber": 235,
        "signature": "export const setActiveConfiguration = (configurationId) =>"
      }
    ],
    "syncManifestWithLocalStorage": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Sync manifest with current localStorage configurations",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 252,
        "signature": "export const syncManifestWithLocalStorage = () =>"
      }
    ],
    "mapTypeToCategory": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "arrow function",
        "description": {
          "summary": "Map component types to manifest categories",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "componentType",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 284,
        "signature": "const mapTypeToCategory = (componentType) =>"
      }
    ],
    "updateMEPItems": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Update MEP items in manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "items",
            "hasDefault": false,
            "defaultValue": null,
            "type": "array"
          },
          {
            "name": "category",
            "hasDefault": true,
            "defaultValue": "'all'",
            "type": "string"
          }
        ],
        "lineNumber": 297,
        "signature": "export const updateMEPItems = (items, category = 'all') =>"
      }
    ],
    "syncMEPItemsWithLocalStorage": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Sync MEP items with localStorage",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 338,
        "signature": "export const syncMEPItemsWithLocalStorage = () =>"
      }
    ],
    "addMEPItem": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Add new MEP item to manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "item",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 353,
        "signature": "export const addMEPItem = (item) =>"
      }
    ],
    "removeMEPItem": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Remove MEP item from manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "itemId",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "itemType",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 388,
        "signature": "export const removeMEPItem = (itemId, itemType) =>"
      }
    ],
    "updateUIState": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Update UI state in manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "stateChanges",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 418,
        "signature": "export const updateUIState = (stateChanges) =>"
      }
    ],
    "updateMeasurements": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Update measurements in manifest",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "measurements",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 434,
        "signature": "export const updateMeasurements = (measurements) =>"
      }
    ],
    "addChangeToHistory": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "arrow function",
        "description": {
          "summary": "Add change to history for audit trail",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "manifest",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "component",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "action",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          },
          {
            "name": "details",
            "hasDefault": true,
            "defaultValue": "{}",
            "type": "object"
          }
        ],
        "lineNumber": 460,
        "signature": "const addChangeToHistory = (manifest, component, action, details = {}) =>"
      }
    ],
    "validateAndMigrateManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "arrow function",
        "description": {
          "summary": "Validate and migrate manifest to current version",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [
          {
            "name": "manifest",
            "hasDefault": false,
            "defaultValue": null,
            "type": "any"
          }
        ],
        "lineNumber": 481,
        "signature": "const validateAndMigrateManifest = (manifest) =>"
      }
    ],
    "getSessionId": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "arrow function",
        "description": {
          "summary": "Retrieves sessionid",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 512,
        "signature": "const getSessionId = () =>"
      }
    ],
    "exportProjectManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Export manifest for backup/migration",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 522,
        "signature": "export const exportProjectManifest = () =>"
      }
    ],
    "getProjectStatistics": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Get project statistics",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 537,
        "signature": "export const getProjectStatistics = () =>"
      }
    ],
    "initializeProject": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named export",
        "description": {
          "summary": "Initialize project manifest on app start",
          "details": [],
          "parameters": [],
          "returns": ""
        },
        "parameters": [],
        "lineNumber": 555,
        "signature": "export const initializeProject = () =>"
      }
    ]
  },
  "imports": {
    "../utils/common3dHelpers": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "items": [
          "calculateScreenPosition",
          "validateDimensionInput",
          "getTierOptionsFromGeometry",
          "findTierSpace",
          "calculateTierYPosition",
          "createAnimationLoop",
          "createEditorKeyHandler"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "items": [
          "calculateScreenPosition",
          "validateDimensionInput",
          "getTierOptionsFromGeometry",
          "findTierSpace",
          "calculateTierYPosition",
          "createAnimationLoop",
          "createEditorKeyHandler"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "items": [
          "validateDimensionInput",
          "getTierOptionsFromGeometry",
          "findTierSpace",
          "calculateTierYPosition",
          "createEditorKeyHandler"
        ],
        "type": "named"
      }
    ],
    "three": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "items": [
          "THREE"
        ],
        "type": "namespace"
      }
    ],
    "./extractGeometrySnapPoints.js": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "items": [
          "extractSnapPoints"
        ],
        "type": "named"
      }
    ],
    "three/addons/controls/OrbitControls.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "OrbitControls"
        ],
        "type": "named"
      }
    ],
    "three/addons/environments/RoomEnvironment.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "RoomEnvironment"
        ],
        "type": "named"
      }
    ],
    "../core/utils.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "dispose"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "items": [
          "dispose",
          "buildRack",
          "buildShell",
          "buildPipesFlexible"
        ],
        "type": "named"
      }
    ],
    "three/addons/controls/TransformControls.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "TransformControls"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "items": [
          "TransformControls"
        ],
        "type": "named"
      }
    ],
    "../controls/ViewCube.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "ViewCube"
        ],
        "type": "named"
      }
    ],
    "../trade-rack/buildRack.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "buildRackScene"
        ],
        "type": "named"
      }
    ],
    "../controls/MeasurementTool.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "MeasurementTool"
        ],
        "type": "named"
      }
    ],
    "../ductwork": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "DuctworkRenderer",
          "DuctEditor"
        ],
        "type": "named"
      }
    ],
    "../piping": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "PipingRenderer"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "PipeEditor"
        ],
        "type": "named"
      }
    ],
    "../conduits": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "ConduitRenderer",
          "ConduitEditorUI"
        ],
        "type": "named"
      }
    ],
    "../cable-trays": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "CableTrayRenderer"
        ],
        "type": "named"
      }
    ],
    "../cable-trays/CableTrayEditor": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "CableTrayEditor"
        ],
        "type": "named"
      }
    ],
    "../materials": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "createMaterials",
          "loadTextures",
          "disposeMaterials"
        ],
        "type": "named"
      }
    ],
    "../core/MepSelectionManager.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "initializeMepSelectionManager"
        ],
        "type": "named"
      }
    ],
    "../trade-rack/TradeRackInteraction.js": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [
          "TradeRackInteraction"
        ],
        "type": "named"
      }
    ],
    "../styles/measurement-styles.css": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "items": [],
        "type": "side-effect"
      }
    ],
    "../../types/buildingShell": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "items": [
          "buildingShellDefaults"
        ],
        "type": "named"
      }
    ],
    "prop-types": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\forms\\app-manual-rack.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\forms\\sign-in.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\forms\\sign-up.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\layout\\app-bottom-options.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\layout\\footer.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-add-mep.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-piping.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\navigation\\app-button-left-menu.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\navigation\\navbar.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\navigation\\project-dashboard-navbar.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\navigation\\project-dashboard-sidebar.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\navigation\\projects-navbar.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\navigation\\projects-sidebar.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\projects\\multi-trade-racks.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\projects\\projects-main.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\ui\\app-ai-chat-panel.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\ui\\app-logo.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\ui\\assembly-card.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\ui\\hero.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\ui\\logo-projects.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\ui\\logo.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\ui\\project-card.js",
        "items": [
          "PropTypes"
        ],
        "type": "default"
      }
    ],
    "./app-manual-building.css": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-manual-rack.css": [
      {
        "file": "src\\components\\forms\\app-manual-rack.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "react-router-dom": [
      {
        "file": "src\\components\\forms\\sign-in.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\forms\\sign-up.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\navigation\\navbar.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\navigation\\project-dashboard-navbar.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\navigation\\projects-navbar.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\projects\\multi-trade-racks.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\ui\\hero.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\ui\\logo.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\index.js",
        "items": [
          "BrowserRouter as Router",
          "Route",
          "Switch",
          "Redirect",
          ""
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\project-dashboard.js",
        "items": [
          "Link"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\projects.js",
        "items": [
          "Link"
        ],
        "type": "named"
      }
    ],
    "./sign-in.css": [
      {
        "file": "src\\components\\forms\\sign-in.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./sign-up.css": [
      {
        "file": "src\\components\\forms\\sign-up.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-bottom-options.css": [
      {
        "file": "src\\components\\layout\\app-bottom-options.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-top-main-menu.css": [
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./footer.css": [
      {
        "file": "src\\components\\layout\\footer.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "react": [
      {
        "file": "src\\components\\mep\\app-add-mep.js",
        "items": [
          "React"
        ],
        "type": "default"
      },
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "items": [
          "useState",
          "useEffect"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useAppState.js",
        "items": [
          "useState",
          "useEffect"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useBuildingRackSync.js",
        "items": [
          "useEffect"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useEventListeners.js",
        "items": [
          "useEffect"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useInitialization.js",
        "items": [
          "useEffect"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useSceneRack.js",
        "items": [
          "useRef",
          "useCallback"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useSceneShell.js",
        "items": [
          "useRef",
          "useCallback"
        ],
        "type": "named"
      },
      {
        "file": "src\\index.js",
        "items": [
          "React"
        ],
        "type": "default"
      },
      {
        "file": "src\\pages\\not-found.js",
        "items": [
          "React"
        ],
        "type": "default"
      }
    ],
    "./app-add-mep.css": [
      {
        "file": "src\\components\\mep\\app-add-mep.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-cable-trays.css": [
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-conduits.css": [
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-ductwork.css": [
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-piping.css": [
      {
        "file": "src\\components\\mep\\app-piping.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "../../types/tradeRack": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "items": [
          "tradeRackDefaults",
          "convertToFeet",
          "calculateBayConfiguration"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "items": [
          "calculateTotalHeight"
        ],
        "type": "named"
      }
    ],
    "./app-rack-properties.css": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "../../utils/projectManifest": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "items": [
          "syncManifestWithLocalStorage",
          "getProjectManifest",
          "setActiveConfiguration"
        ],
        "type": "named"
      }
    ],
    "./app-saved-configurations.css": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-tier-mep.css": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-button-left-menu.css": [
      {
        "file": "src\\components\\navigation\\app-button-left-menu.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "../ui": [
      {
        "file": "src\\components\\navigation\\navbar.js",
        "items": [
          "Logo"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\navigation\\project-dashboard-navbar.js",
        "items": [
          "LogoProjects",
          "Logo"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\navigation\\projects-navbar.js",
        "items": [
          "LogoProjects",
          "Logo"
        ],
        "type": "named"
      },
      {
        "file": "src\\components\\projects\\projects-main.js",
        "items": [
          "ProjectCard"
        ],
        "type": "named"
      }
    ],
    "./navbar.css": [
      {
        "file": "src\\components\\navigation\\navbar.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./project-dashboard-navbar.css": [
      {
        "file": "src\\components\\navigation\\project-dashboard-navbar.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./project-dashboard-sidebar.css": [
      {
        "file": "src\\components\\navigation\\project-dashboard-sidebar.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./projects-navbar.css": [
      {
        "file": "src\\components\\navigation\\projects-navbar.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./projects-sidebar.css": [
      {
        "file": "src\\components\\navigation\\projects-sidebar.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./multi-trade-racks.css": [
      {
        "file": "src\\components\\projects\\multi-trade-racks.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./projects-main.css": [
      {
        "file": "src\\components\\projects\\projects-main.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-ai-chat-panel.css": [
      {
        "file": "src\\components\\ui\\app-ai-chat-panel.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-logo.css": [
      {
        "file": "src\\components\\ui\\app-logo.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./assembly-card.css": [
      {
        "file": "src\\components\\ui\\assembly-card.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./hero.css": [
      {
        "file": "src\\components\\ui\\hero.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./logo-projects.css": [
      {
        "file": "src\\components\\ui\\logo-projects.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./logo.css": [
      {
        "file": "src\\components\\ui\\logo.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./project-card.css": [
      {
        "file": "src\\components\\ui\\project-card.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "../utils/projectManifest": [
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "items": [
          "updateBuildingShell",
          "updateTradeRackConfiguration",
          "setActiveConfiguration"
        ],
        "type": "named"
      },
      {
        "file": "src\\handlers\\mepHandlers.js",
        "items": [
          "updateMEPItems",
          "addMEPItem",
          "removeMEPItem"
        ],
        "type": "named"
      },
      {
        "file": "src\\handlers\\uiHandlers.js",
        "items": [
          "updateMeasurements"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useAppState.js",
        "items": [
          "updateUIState",
          "setActiveConfiguration",
          "updateBuildingShell",
          "updateTradeRackConfiguration"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useEventListeners.js",
        "items": [
          "updateMeasurements",
          "updateMEPItems"
        ],
        "type": "named"
      },
      {
        "file": "src\\hooks\\useInitialization.js",
        "items": [
          "initializeProject",
          "syncManifestWithLocalStorage",
          "syncMEPItemsWithLocalStorage",
          "updateMEPItems"
        ],
        "type": "named"
      }
    ],
    "../types/buildingShell": [
      {
        "file": "src\\hooks\\useAppState.js",
        "items": [
          "buildingShellDefaults"
        ],
        "type": "named"
      }
    ],
    "../types/tradeRack": [
      {
        "file": "src\\hooks\\useAppState.js",
        "items": [
          "tradeRackDefaults"
        ],
        "type": "named"
      }
    ],
    "../components/3d/trade-rack/buildRack": [
      {
        "file": "src\\hooks\\useSceneRack.js",
        "items": [
          "buildRackScene"
        ],
        "type": "named"
      }
    ],
    "../components/3d/core/utils": [
      {
        "file": "src\\hooks\\useSceneShell.js",
        "items": [
          "buildShell",
          "buildFloorOnly"
        ],
        "type": "named"
      }
    ],
    "./pages": [
      {
        "file": "src\\index.js",
        "items": [
          "ProjectDashboard",
          "Projects",
          "Home",
          "AppPage",
          "SignupPage",
          "Login",
          "NotFound"
        ],
        "type": "named"
      }
    ],
    "react-dom": [
      {
        "file": "src\\index.js",
        "items": [
          "ReactDOM"
        ],
        "type": "default"
      }
    ],
    "./style.css": [
      {
        "file": "src\\index.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "react-helmet": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "Helmet"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\home.js",
        "items": [
          "Helmet"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\login.js",
        "items": [
          "Helmet"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\not-found.js",
        "items": [
          "Helmet"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\project-dashboard.js",
        "items": [
          "Helmet"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\projects.js",
        "items": [
          "Helmet"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\signup-page.js",
        "items": [
          "Helmet"
        ],
        "type": "named"
      }
    ],
    "../components/layout": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "AppTopMainMenu",
          "AppBottomOptions"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\home.js",
        "items": [
          "Footer"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\login.js",
        "items": [
          "Footer"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\signup-page.js",
        "items": [
          "Footer"
        ],
        "type": "named"
      }
    ],
    "../components/navigation": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "AppButtonLeftMenu"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\home.js",
        "items": [
          "Navbar"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\login.js",
        "items": [
          "Navbar"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\project-dashboard.js",
        "items": [
          "ProjectDashboardNavbar",
          "ProjectDashboardSidebar"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\projects.js",
        "items": [
          "ProjectsNavbar",
          "ProjectsSidebar"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\signup-page.js",
        "items": [
          "Navbar"
        ],
        "type": "named"
      }
    ],
    "../components/mep": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "AppRackProperties",
          "AppSavedConfigurations",
          "AppTierMEP",
          "AppAddMEP",
          "AppDuctwork",
          "AppPiping",
          "AppConduits",
          "AppCableTrays"
        ],
        "type": "named"
      }
    ],
    "../components/ui": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "AppAIChatPanel"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\home.js",
        "items": [
          "Hero"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\project-dashboard.js",
        "items": [
          "AssemblyCard"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\projects.js",
        "items": [
          "ProjectCard"
        ],
        "type": "named"
      }
    ],
    "../components/forms": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "AppManualBuilding"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\login.js",
        "items": [
          "SignIn"
        ],
        "type": "named"
      },
      {
        "file": "src\\pages\\signup-page.js",
        "items": [
          "SignUp"
        ],
        "type": "named"
      }
    ],
    "../components/3d": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "ThreeScene"
        ],
        "type": "named"
      }
    ],
    "../hooks/useSceneShell": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "useSceneShell"
        ],
        "type": "named"
      }
    ],
    "../hooks/useSceneRack": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "useSceneRack"
        ],
        "type": "named"
      }
    ],
    "../hooks/useAppState": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "useAppState"
        ],
        "type": "named"
      }
    ],
    "../hooks/useInitialization": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "useInitialization"
        ],
        "type": "named"
      }
    ],
    "../hooks/useBuildingRackSync": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "useBuildingRackSync"
        ],
        "type": "named"
      }
    ],
    "../hooks/useEventListeners": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "useEventListeners"
        ],
        "type": "named"
      }
    ],
    "../handlers/mepHandlers": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "createMEPHandlers"
        ],
        "type": "named"
      }
    ],
    "../handlers/configurationHandlers": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "createConfigurationHandlers"
        ],
        "type": "named"
      }
    ],
    "../handlers/uiHandlers": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [
          "createUIHandlers"
        ],
        "type": "named"
      }
    ],
    "../utils/manifestExporter": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./app-page.css": [
      {
        "file": "src\\pages\\app-page.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "../components/projects": [
      {
        "file": "src\\pages\\home.js",
        "items": [
          "MultiTradeRacks"
        ],
        "type": "named"
      }
    ],
    "./home.css": [
      {
        "file": "src\\pages\\home.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./login.css": [
      {
        "file": "src\\pages\\login.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./not-found.css": [
      {
        "file": "src\\pages\\not-found.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./project-dashboard.css": [
      {
        "file": "src\\pages\\project-dashboard.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./projects.css": [
      {
        "file": "src\\pages\\projects.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./signup-page.css": [
      {
        "file": "src\\pages\\signup-page.js",
        "items": [],
        "type": "side-effect"
      }
    ],
    "./projectManifest": [
      {
        "file": "src\\utils\\manifestExporter.js",
        "items": [
          "exportProjectManifest",
          "getProjectStatistics"
        ],
        "type": "named"
      }
    ]
  },
  "exports": {
    "CableTrayEditor": [
      {
        "file": "src\\components\\3d\\cable-trays\\CableTrayEditor.js",
        "type": "named"
      }
    ],
    "CableTrayGeometry": [
      {
        "file": "src\\components\\3d\\cable-trays\\index.js",
        "type": "named"
      }
    ],
    "CableTrayRenderer": [
      {
        "file": "src\\components\\3d\\cable-trays\\index.js",
        "type": "named"
      }
    ],
    "CableTrayInteraction": [
      {
        "file": "src\\components\\3d\\cable-trays\\index.js",
        "type": "named"
      }
    ],
    "ConduitEditorUI": [
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\conduits\\ConduitEditorUI.js",
        "type": "default"
      },
      {
        "file": "src\\components\\3d\\conduits\\index.js",
        "type": "named"
      }
    ],
    "ConduitGeometry": [
      {
        "file": "src\\components\\3d\\conduits\\index.js",
        "type": "named"
      }
    ],
    "ConduitInteraction": [
      {
        "file": "src\\components\\3d\\conduits\\index.js",
        "type": "named"
      }
    ],
    "ConduitRenderer": [
      {
        "file": "src\\components\\3d\\conduits\\index.js",
        "type": "named"
      }
    ],
    "extractSnapPoints": [
      {
        "file": "src\\components\\3d\\core\\extractGeometrySnapPoints.js",
        "type": "named"
      }
    ],
    "getColumnSize": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "named"
      }
    ],
    "convertToFeet": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      },
      {
        "file": "src\\types\\buildingShell.js",
        "type": "named"
      },
      {
        "file": "src\\types\\tradeRack.js",
        "type": "named"
      }
    ],
    "inchesToMeters": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "named"
      }
    ],
    "feetToMeters": [
      {
        "file": "src\\components\\3d\\core\\mepUtils.js",
        "type": "named"
      }
    ],
    "ft2m": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "in2m": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "ft2in": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "dispose": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "buildRack": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "buildShell": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "buildFloorOnly": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "tierHeightFt": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "bottomBeamCenterY": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "buildPipesFlexible": [
      {
        "file": "src\\components\\3d\\core\\utils.js",
        "type": "named"
      }
    ],
    "DuctEditor": [
      {
        "file": "src\\components\\3d\\ductwork\\DuctEditor.js",
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\ductwork\\index.js",
        "type": "named"
      }
    ],
    "SnapLineManager": [
      {
        "file": "src\\components\\3d\\ductwork\\index.js",
        "type": "named"
      }
    ],
    "DuctGeometry": [
      {
        "file": "src\\components\\3d\\ductwork\\index.js",
        "type": "named"
      }
    ],
    "DuctInteraction": [
      {
        "file": "src\\components\\3d\\ductwork\\index.js",
        "type": "named"
      }
    ],
    "DuctworkRenderer": [
      {
        "file": "src\\components\\3d\\ductwork\\index.js",
        "type": "named"
      }
    ],
    "default as ThreeScene ": [
      {
        "file": "src\\components\\3d\\index.js",
        "type": "default"
      }
    ],
    "MeasurementTool": [
      {
        "file": "src\\components\\3d\\index.js",
        "type": "named"
      }
    ],
    "ViewCube": [
      {
        "file": "src\\components\\3d\\index.js",
        "type": "named"
      }
    ],
    "createMaterials": [
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "type": "named"
      }
    ],
    "loadTextures": [
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "type": "named"
      }
    ],
    "disposeMaterials": [
      {
        "file": "src\\components\\3d\\materials\\index.js",
        "type": "named"
      }
    ],
    "PipeGeometry": [
      {
        "file": "src\\components\\3d\\piping\\index.js",
        "type": "named"
      }
    ],
    "PipeInteraction": [
      {
        "file": "src\\components\\3d\\piping\\index.js",
        "type": "named"
      }
    ],
    "PipingRenderer": [
      {
        "file": "src\\components\\3d\\piping\\index.js",
        "type": "named"
      }
    ],
    "PipeEditor": [
      {
        "file": "src\\components\\3d\\piping\\index.js",
        "type": "named"
      },
      {
        "file": "src\\components\\3d\\piping\\PipeEditor.js",
        "type": "named"
      }
    ],
    "ThreeScene": [
      {
        "file": "src\\components\\3d\\scene\\ThreeScene.jsx",
        "type": "default"
      }
    ],
    "buildRackScene": [
      {
        "file": "src\\components\\3d\\trade-rack\\buildRack.js",
        "type": "named"
      }
    ],
    "initChatInterface": [
      {
        "file": "src\\components\\3d\\ui\\chatInterface.js",
        "type": "named"
      }
    ],
    "calculateScreenPosition": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "validateDimensionInput": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "getTierOptionsFromGeometry": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "findTierSpace": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "calculateTierYPosition": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "calculateTierPosition": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "disposeObject3D": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "createButtonHoverHandlers": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "calculateRackLength": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "createAnimationLoop": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "createEditorKeyHandler": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "setupTransformControls": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "registerWithMepManager": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "setupRaycaster": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "updateMouseCoordinates": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "createMepKeyboardHandler": [
      {
        "file": "src\\components\\3d\\utils\\common3dHelpers.js",
        "type": "named"
      }
    ],
    "AppManualBuilding": [
      {
        "file": "src\\components\\forms\\app-manual-building.js",
        "type": "default"
      }
    ],
    "AppManualRack": [
      {
        "file": "src\\components\\forms\\app-manual-rack.js",
        "type": "default"
      }
    ],
    "default as SignIn ": [
      {
        "file": "src\\components\\forms\\index.js",
        "type": "default"
      }
    ],
    "default as SignUp ": [
      {
        "file": "src\\components\\forms\\index.js",
        "type": "default"
      }
    ],
    "default as AppManualBuilding ": [
      {
        "file": "src\\components\\forms\\index.js",
        "type": "default"
      }
    ],
    "default as AppManualRack ": [
      {
        "file": "src\\components\\forms\\index.js",
        "type": "default"
      }
    ],
    "SignIn": [
      {
        "file": "src\\components\\forms\\sign-in.js",
        "type": "default"
      }
    ],
    "SignUp": [
      {
        "file": "src\\components\\forms\\sign-up.js",
        "type": "default"
      }
    ],
    "AppBottomOptions": [
      {
        "file": "src\\components\\layout\\app-bottom-options.js",
        "type": "default"
      }
    ],
    "AppTopMainMenu": [
      {
        "file": "src\\components\\layout\\app-top-main-menu.js",
        "type": "default"
      }
    ],
    "Footer": [
      {
        "file": "src\\components\\layout\\footer.js",
        "type": "default"
      }
    ],
    "default as AppTopMainMenu ": [
      {
        "file": "src\\components\\layout\\index.js",
        "type": "default"
      }
    ],
    "default as AppBottomOptions ": [
      {
        "file": "src\\components\\layout\\index.js",
        "type": "default"
      }
    ],
    "default as Footer ": [
      {
        "file": "src\\components\\layout\\index.js",
        "type": "default"
      }
    ],
    "AppAddMEP": [
      {
        "file": "src\\components\\mep\\app-add-mep.js",
        "type": "default"
      }
    ],
    "AppCableTrays": [
      {
        "file": "src\\components\\mep\\app-cable-trays.js",
        "type": "default"
      }
    ],
    "AppConduits": [
      {
        "file": "src\\components\\mep\\app-conduits.js",
        "type": "default"
      }
    ],
    "AppDuctwork": [
      {
        "file": "src\\components\\mep\\app-ductwork.js",
        "type": "default"
      }
    ],
    "AppPiping": [
      {
        "file": "src\\components\\mep\\app-piping.js",
        "type": "default"
      }
    ],
    "AppRackProperties": [
      {
        "file": "src\\components\\mep\\app-rack-properties.js",
        "type": "default"
      }
    ],
    "AppSavedConfigurations": [
      {
        "file": "src\\components\\mep\\app-saved-configurations.js",
        "type": "default"
      }
    ],
    "AppTierMEP": [
      {
        "file": "src\\components\\mep\\app-tier-mep.js",
        "type": "default"
      }
    ],
    "default as AppDuctwork ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "default as AppPiping ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "default as AppConduits ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "default as AppCableTrays ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "default as AppTierMEP ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "default as AppAddMEP ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "default as AppRackProperties ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "default as AppSavedConfigurations ": [
      {
        "file": "src\\components\\mep\\index.js",
        "type": "default"
      }
    ],
    "AppButtonLeftMenu": [
      {
        "file": "src\\components\\navigation\\app-button-left-menu.js",
        "type": "default"
      }
    ],
    "default as AppButtonLeftMenu ": [
      {
        "file": "src\\components\\navigation\\index.js",
        "type": "default"
      }
    ],
    "default as Navbar ": [
      {
        "file": "src\\components\\navigation\\index.js",
        "type": "default"
      }
    ],
    "default as ProjectsNavbar ": [
      {
        "file": "src\\components\\navigation\\index.js",
        "type": "default"
      }
    ],
    "default as ProjectDashboardNavbar ": [
      {
        "file": "src\\components\\navigation\\index.js",
        "type": "default"
      }
    ],
    "default as ProjectsSidebar ": [
      {
        "file": "src\\components\\navigation\\index.js",
        "type": "default"
      }
    ],
    "default as ProjectDashboardSidebar ": [
      {
        "file": "src\\components\\navigation\\index.js",
        "type": "default"
      }
    ],
    "Navbar": [
      {
        "file": "src\\components\\navigation\\navbar.js",
        "type": "default"
      }
    ],
    "ProjectDashboardNavbar": [
      {
        "file": "src\\components\\navigation\\project-dashboard-navbar.js",
        "type": "default"
      }
    ],
    "ProjectDashboardSidebar": [
      {
        "file": "src\\components\\navigation\\project-dashboard-sidebar.js",
        "type": "default"
      }
    ],
    "ProjectsNavbar": [
      {
        "file": "src\\components\\navigation\\projects-navbar.js",
        "type": "default"
      }
    ],
    "ProjectsSidebar": [
      {
        "file": "src\\components\\navigation\\projects-sidebar.js",
        "type": "default"
      }
    ],
    "default as ProjectsMain ": [
      {
        "file": "src\\components\\projects\\index.js",
        "type": "default"
      }
    ],
    "default as MultiTradeRacks ": [
      {
        "file": "src\\components\\projects\\index.js",
        "type": "default"
      }
    ],
    "MultiTradeRacks": [
      {
        "file": "src\\components\\projects\\multi-trade-racks.js",
        "type": "default"
      }
    ],
    "ProjectsMain": [
      {
        "file": "src\\components\\projects\\projects-main.js",
        "type": "default"
      }
    ],
    "AppAIChatPanel": [
      {
        "file": "src\\components\\ui\\app-ai-chat-panel.js",
        "type": "default"
      }
    ],
    "AppLogo": [
      {
        "file": "src\\components\\ui\\app-logo.js",
        "type": "default"
      }
    ],
    "AssemblyCard": [
      {
        "file": "src\\components\\ui\\assembly-card.js",
        "type": "default"
      }
    ],
    "Hero": [
      {
        "file": "src\\components\\ui\\hero.js",
        "type": "default"
      }
    ],
    "default as AppAIChatPanel ": [
      {
        "file": "src\\components\\ui\\index.js",
        "type": "default"
      }
    ],
    "default as Hero ": [
      {
        "file": "src\\components\\ui\\index.js",
        "type": "default"
      }
    ],
    "default as Logo ": [
      {
        "file": "src\\components\\ui\\index.js",
        "type": "default"
      }
    ],
    "default as AppLogo ": [
      {
        "file": "src\\components\\ui\\index.js",
        "type": "default"
      }
    ],
    "default as LogoProjects ": [
      {
        "file": "src\\components\\ui\\index.js",
        "type": "default"
      }
    ],
    "default as AssemblyCard ": [
      {
        "file": "src\\components\\ui\\index.js",
        "type": "default"
      }
    ],
    "default as ProjectCard ": [
      {
        "file": "src\\components\\ui\\index.js",
        "type": "default"
      }
    ],
    "LogoProjects": [
      {
        "file": "src\\components\\ui\\logo-projects.js",
        "type": "default"
      }
    ],
    "Logo": [
      {
        "file": "src\\components\\ui\\logo.js",
        "type": "default"
      }
    ],
    "ProjectCard": [
      {
        "file": "src\\components\\ui\\project-card.js",
        "type": "default"
      }
    ],
    "createConfigurationHandlers": [
      {
        "file": "src\\handlers\\configurationHandlers.js",
        "type": "named"
      }
    ],
    "createMEPHandlers": [
      {
        "file": "src\\handlers\\mepHandlers.js",
        "type": "named"
      }
    ],
    "createUIHandlers": [
      {
        "file": "src\\handlers\\uiHandlers.js",
        "type": "named"
      }
    ],
    "useAppState": [
      {
        "file": "src\\hooks\\useAppState.js",
        "type": "named"
      }
    ],
    "useBuildingRackSync": [
      {
        "file": "src\\hooks\\useBuildingRackSync.js",
        "type": "named"
      }
    ],
    "useEventListeners": [
      {
        "file": "src\\hooks\\useEventListeners.js",
        "type": "named"
      }
    ],
    "useInitialization": [
      {
        "file": "src\\hooks\\useInitialization.js",
        "type": "named"
      }
    ],
    "useSceneRack": [
      {
        "file": "src\\hooks\\useSceneRack.js",
        "type": "named"
      }
    ],
    "useSceneShell": [
      {
        "file": "src\\hooks\\useSceneShell.js",
        "type": "named"
      }
    ],
    "AppPage": [
      {
        "file": "src\\pages\\app-page.js",
        "type": "default"
      }
    ],
    "Home": [
      {
        "file": "src\\pages\\home.js",
        "type": "default"
      }
    ],
    "default as AppPage ": [
      {
        "file": "src\\pages\\index.js",
        "type": "default"
      }
    ],
    "default as Home ": [
      {
        "file": "src\\pages\\index.js",
        "type": "default"
      }
    ],
    "default as Login ": [
      {
        "file": "src\\pages\\index.js",
        "type": "default"
      }
    ],
    "default as NotFound ": [
      {
        "file": "src\\pages\\index.js",
        "type": "default"
      }
    ],
    "default as ProjectDashboard ": [
      {
        "file": "src\\pages\\index.js",
        "type": "default"
      }
    ],
    "default as Projects ": [
      {
        "file": "src\\pages\\index.js",
        "type": "default"
      }
    ],
    "default as SignupPage ": [
      {
        "file": "src\\pages\\index.js",
        "type": "default"
      }
    ],
    "Login": [
      {
        "file": "src\\pages\\login.js",
        "type": "default"
      }
    ],
    "NotFound": [
      {
        "file": "src\\pages\\not-found.js",
        "type": "default"
      }
    ],
    "ProjectDashboard": [
      {
        "file": "src\\pages\\project-dashboard.js",
        "type": "default"
      }
    ],
    "Projects": [
      {
        "file": "src\\pages\\projects.js",
        "type": "default"
      }
    ],
    "SignupPage": [
      {
        "file": "src\\pages\\signup-page.js",
        "type": "default"
      }
    ],
    "buildingShellDefaults": [
      {
        "file": "src\\types\\buildingShell.js",
        "type": "named"
      }
    ],
    "tradeRackDefaults": [
      {
        "file": "src\\types\\tradeRack.js",
        "type": "named"
      }
    ],
    "calculateTotalHeight": [
      {
        "file": "src\\types\\tradeRack.js",
        "type": "named"
      }
    ],
    "calculateBayConfiguration": [
      {
        "file": "src\\types\\tradeRack.js",
        "type": "named"
      }
    ],
    "exportConfigurationsToFile": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named"
      }
    ],
    "importConfigurationsFromFile": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named"
      }
    ],
    "saveConfigurationsToLocalStorage": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named"
      }
    ],
    "loadConfigurationsFromLocalStorage": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named"
      }
    ],
    "generateExportFilename": [
      {
        "file": "src\\utils\\fileOperations.js",
        "type": "named"
      }
    ],
    "logManifestToConsole": [
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "named"
      }
    ],
    "downloadManifest": [
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "named"
      }
    ],
    "getManifestInfo": [
      {
        "file": "src\\utils\\manifestExporter.js",
        "type": "named"
      }
    ],
    "createInitialManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "getProjectManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "saveProjectManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "updateBuildingShell": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "updateTradeRackConfiguration": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "deleteTradeRackConfiguration": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "setActiveConfiguration": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "syncManifestWithLocalStorage": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "updateMEPItems": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "syncMEPItemsWithLocalStorage": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "addMEPItem": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "removeMEPItem": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "updateUIState": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "updateMeasurements": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "exportProjectManifest": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "getProjectStatistics": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ],
    "initializeProject": [
      {
        "file": "src\\utils\\projectManifest.js",
        "type": "named"
      }
    ]
  },
  "summary": {
    "totalFiles": 77,
    "totalFunctions": 347,
    "totalImports": 180,
    "totalExports": 176
  }
}